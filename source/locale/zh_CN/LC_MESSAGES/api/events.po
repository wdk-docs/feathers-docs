# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-25 13:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/api/events.rst:2
msgid "Events"
msgstr "事件"

#: ../../source/api/events.rst:4
msgid ""
"Events are the key part of Feathers real-time functionality. All events "
"in Feathers are provided through the `NodeJS EventEmitter "
"<https://nodejs.org/api/events.html>`_ interface. This section describes"
msgstr ""
"事件是Feathers实时功能的关键部分. Feathers中的所有事件都通过 `NodeJS EventEmitter "
"<https://nodejs.org/api/events.html>`_ interface提供.本节介绍"

#: ../../source/api/events.rst:8
msgid "A quick overview of the `NodeJS EventEmitter interface <#eventemitters>`_"
msgstr "快速概述 `NodeJS EventEmitter接口 <#eventemitters>`_"

#: ../../source/api/events.rst:9
msgid "The standard `service events <#service-events>`_"
msgstr "标准的 `服务事件 <＃service-events>`_"

#: ../../source/api/events.rst:10
msgid ""
"How to allow sending `custom events <#custom-events>`_ from the server to"
" the client"
msgstr "如何允许从服务器向客户端发送 `自定义事件 <#custom-events>`_"

#: ../../source/api/events.rst:15
msgid ""
"For more information on how to send real-time events to clients, see the "
":doc:`./channels`."
msgstr "有关如何向客户端发送实时事件的更多信息,请参阅 :doc:`./channels`."

#: ../../source/api/events.rst:19
msgid "EventEmitters"
msgstr "EventEmitters"

#: ../../source/api/events.rst:21
msgid ""
"Once registered, any :doc:`./services` gets turned into a standard "
"`NodeJS EventEmitter <https://nodejs.org/api/events.html>`_ and can be "
"used accordingly."
msgstr ""
"一旦注册,任何 :doc:`./services` 变成标准的 `NodeJS EventEmitter "
"<https://nodejs.org/api/events.html>`_ 并且可以相应地使用."

#: ../../source/api/events.rst:55
msgid "Service Events"
msgstr "服务事件"

#: ../../source/api/events.rst:57
msgid ""
"Any service automaticaly emits ``created``, ``updated``, ``patched`` and "
"``removed`` events when the respective service method returns "
"successfully. This works on the client as well as on the server. When the"
" client is using :doc:`socketio` or :doc:`primus`, events will be pushed "
"automatically from the server to all connected clients. This is "
"essentially how Feathers does real-time."
msgstr ""
"当相应的服务方法成功返回时,任何服务都会自动发出 ``created``, ``updated``, ``patchched`` 和 "
"``removed`` 事件.这适用于客户端以及服务器.当客户端使用 :doc:`socketio` 或 :doc:`primus` "
"时,事件将自动从服务器推送到所有连接的客户端.这实际上是Feathers实时的方式."

#: ../../source/api/events.rst:65
msgid "Events are not fired until all of your :doc:`./hooks` have executed."
msgstr "直到你的所有 :doc:`./hooks` 都被执行后才会触发事件."

#: ../../source/api/events.rst:74
msgid ""
"For information on how those events are published for real-time updates "
"to connected clients, see the :doc:`./channels`."
msgstr "有关如何发布这些事件以实现对已连接客户端的实时更新的信息,请参阅 :doc:`./channels`."

#: ../../source/api/events.rst:77
msgid ""
"Additionally to the event ``data``, all events also get the `hook context"
" <./hooks>`_ from their method call passed as the second parameter."
msgstr "除了事件 ``data`` 之外,所有事件还从它们作为第二个参数传递的方法调用中得到 `钩子上下文 <./hooks>`_."

#: ../../source/api/events.rst:81
msgid "created"
msgstr "created"

#: ../../source/api/events.rst:83
msgid ""
"The ``created`` event will fire with the result data when a service "
"``create`` returns successfully."
msgstr "当服务 ``create`` 成功返回时, ``created`` 事件将触发结果数据."

#: ../../source/api/events.rst:107
msgid "updated, patched"
msgstr "updated, patched"

#: ../../source/api/events.rst:109
msgid ""
"The ``updated`` and ``patched`` events will fire with the callback data "
"when a service ``update`` or ``patch`` method calls back successfully."
msgstr "当服务 ``update`` 或 ``patch`` 方法成功回调时, ``updated`` 和 ``patched`` 事件将使用回调数据触发."

#: ../../source/api/events.rst:141
msgid "removed"
msgstr "removed"

#: ../../source/api/events.rst:143
msgid ""
"The ``removed`` event will fire with the callback data when a service "
"``remove`` calls back successfully."
msgstr "当服务 ``remove`` 成功回调时, ``removed`` 事件将使用回调数据触发."

#: ../../source/api/events.rst:165
msgid "Custom events"
msgstr "自定义事件"

#: ../../source/api/events.rst:167
msgid ""
"By default, real-time clients will only receive the `standard events "
"<#service-events>`_. However, it is possible to define a list of custom "
"events on a service as ``service.events`` that should also be passed when"
" ``service.emit('customevent', data)`` is called on the server. The "
"``context`` for custom events won’t be a full hook context but just an "
"object containing ``{ app, service, path, result }``."
msgstr ""
"默认情况下,实时客户端只接收 `标准事件 <＃service-events>`_.但是,可以将服务上的自定义事件列表定义为 "
"``service.events``,当服务器上调用 ``service.emit('customevent',data)`` "
"时,也应该传递这些事件.自定义事件的 ``context`` 不是一个完整的钩子上下文,而只是一个包含 "
"``{app,service,path,result}`` 的对象."

#: ../../source/api/events.rst:173
msgid ""
"Custom events can only be sent from the server to the client, not the "
"other way (client to server). :ref:`faq_how-do-i-create-custom-methods`"
msgstr ""
"自定义事件只能从服务器发送到客户端,而不是其他方式(客户端到服务器). `学到更多 <../faq/readme.md#how-do-i"
"-create-custom-methods>`_"

#: ../../source/api/events.rst:176
msgid ""
"For example, a payment service that sends status events to the client "
"while processing a payment could look like this:"
msgstr "例如,在处理付款时向客户端发送状态事件的付款服务可能如下所示:"

#: ../../source/api/events.rst:196
msgid ""
"The :doc:`./databases/common` also take a list of custom events as an "
":ref:`databases_common_serviceoptions`."
msgstr ""
":doc:`./databases/common` 也将自定义事件列表作为 `初始化选项 <./databases/common.md "
"#serviceoptions>`_:"

#: ../../source/api/events.rst:207
msgid "Using ``service.emit`` custom events can also be sent in a hook:"
msgstr "使用 ``service.emit`` 自定义事件也可以在钩子中发送:"

#: ../../source/api/events.rst:219
#, fuzzy
msgid ""
"Custom events can be :ref:`channels_publishing` just like standard events"
" and listened to it in a :ref:`client_socketio_listening-to-events`."
msgstr ""
"自定义事件可以是 :ref:`channels_publishing` 就像标准事件一样,并在 :ref:`client"
"/socketio_listening-to-events` 中监听它."

#~ msgid ""
#~ "Any service automaticaly emits ``created``,"
#~ " ``updated``, ``patched`` and ``removed`` "
#~ "events when the respective service "
#~ "method returns successfully. This works "
#~ "on the client as well as on "
#~ "the server. When the client is "
#~ "using :doc:`primus`, events will be "
#~ "pushed automatically from the server to"
#~ " all connected clients. This is "
#~ "essentially how Feathers does real-time."
#~ msgstr ""

#~ msgid ""
#~ "Custom events can be `published through"
#~ " channels <./channels.md#publishing>`_ just like"
#~ " standard events and listened to it"
#~ " in a :doc:`./client` or `directly on"
#~ " the socket connection <./client/socketio.md"
#~ "#listening-to-events>`_:"
#~ msgstr ""

#~ msgid ""
#~ "Custom events can be :doc:`published "
#~ "through channels <./channels#publishing>`_ just "
#~ "like standard events and listened to "
#~ "it in a :doc:`./client` or `directly "
#~ "on the socket connection <./client/socketio"
#~ "#listening-to-events>`_:"
#~ msgstr ""

#~ msgid ""
#~ "Custom events can be :doc:`published "
#~ "through channels <./channels#publishing>` just "
#~ "like standard events and listened to "
#~ "it in a :doc:`./client` or `directly "
#~ "on the socket connection <./client/socketio"
#~ "#listening-to-events>`:"
#~ msgstr ""

#~ msgid ""
#~ "Custom events can be "
#~ ":doc:`./channels#publishing` just like standard "
#~ "events and listened to it in a "
#~ ":doc:`./client/socketio#listening-to-events`."
#~ msgstr ""

