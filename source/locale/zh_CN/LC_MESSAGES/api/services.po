# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-22 19:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/api/services.rst:2
msgid "Services"
msgstr "服务"

#: ../../source/api/services.rst:4
msgid ""
"“Services” are the heart of every Feathers application. Services are "
"JavaScript objects (or instances of `ES6 classes "
"<https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes>`_)"
" that implement :ref:`services_service-method`. Feathers itself will also"
" add some :ref:`services_feathers-functionality` to its services."
msgstr ""

#: ../../source/api/services.rst:12
msgid "Service methods"
msgstr "服务方式"

#: ../../source/api/services.rst:14
msgid ""
"Service methods are pre-defined `CRUD "
"<https://en.wikipedia.org/wiki/Create,_read,_update_and_delete>`_ methods"
" that your service object can implement (or that have already been "
"implemented by one of the :doc:`./databases/common`.. Below is a complete"
" example of the Feathers *service interface* as a normal JavaScript "
"object either returning a `Promise <https://developer.mozilla.org/en-"
"US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_ or using "
"`async/await <https://developer.mozilla.org/en-"
"US/docs/Web/JavaScript/Reference/Statements/async_function>`_:"
msgstr ""

#: ../../source/api/services.rst:54
msgid ""
"Services can also be an instance of an `ES6 class "
"<https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes>`_:"
msgstr ""
"Services can also be an instance of an `ES6 class "
"<https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes>`_:"

#: ../../source/api/services.rst:85
#, fuzzy
msgid ""
"Methods are optional, and if a method is not implemented Feathers will "
"automatically emit a ``NotImplemented`` error."
msgstr ""
"**ProTip:** Methods are optional, and if a method is not implemented "
"Feathers will automatically emit a ``NotImplemented`` error."

#: ../../source/api/services.rst:91
msgid ""
"Always use the service returned by ``app.service(path)`` not the service "
"object (the ``myService`` object above) directly. See the `app.service "
"documentation <./application.md#servicepath>`_ for more information."
msgstr ""

#: ../../source/api/services.rst:95
#, fuzzy
msgid ""
"Service methods must return a `Promise <https://developer.mozilla.org/en-"
"US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_ or be declared"
" as ``async`` and have the following parameters:"
msgstr ""
"Service methods must return a ```Promise`` <https://developer.mozilla.org"
"/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_ or be "
"declared as ``async`` and have the following parameters:"

#: ../../source/api/services.rst:98
msgid ""
"``id`` — The identifier for the resource. A resource is the data "
"identified by a unique id."
msgstr ""
"``id`` — The identifier for the resource. A resource is the data "
"identified by a unique id."

#: ../../source/api/services.rst:99
msgid "``data`` — The resource data."
msgstr "``data`` — 资源数据。"

#: ../../source/api/services.rst:100
#, fuzzy
msgid ""
"``params`` - Additional parameters for the method call, see :ref"
":`services-params`"
msgstr ""
"``params`` - Additional parameters for the method call, see `params "
"<#params>`_"

#: ../../source/api/services.rst:102
#, fuzzy
msgid ""
"Once registered, the service can be retrieved and used via "
":ref:`application_servicepath`."
msgstr ""
"Once registered, the service can be retrieved and used via `app.service()"
" <./application.md#servicepath>`_:"

#: ../../source/api/services.rst:111
msgid ""
"Keep in mind that services don’t have to use databases. You could easily "
"replace the database in the example with a package that uses some API to,"
" for example, pull in GitHub stars or stock ticker data."
msgstr ""
"Keep in mind that services don’t have to use databases. You could easily "
"replace the database in the example with a package that uses some API to,"
" for example, pull in GitHub stars or stock ticker data."

#: ../../source/api/services.rst:115
msgid ""
"This section describes the general usage of service methods and how to "
"implement them. They are already implemented by the official Feathers "
"database adapters. For specifics on how to use the database adapters, see"
" the :doc:`./databases/common`."
msgstr ""
"This section describes the general usage of service methods and how to "
"implement them. They are already implemented by the official Feathers "
"database adapters. For specifics on how to use the database adapters, see"
" the :doc:`./databases/common`."

#: ../../source/api/services.rst:123
msgid "params"
msgstr "params"

#: ../../source/api/services.rst:125
msgid ""
"``params`` contain additional information for the service method call. "
"Some properties in ``params`` can be set by Feathers already. Commonly "
"used are:"
msgstr ""
"``params`` contain additional information for the service method call. "
"Some properties in ``params`` can be set by Feathers already. Commonly "
"used are:"

#: ../../source/api/services.rst:129
msgid ""
"``params.query`` - the query parameters from the client, either passed as"
" URL query parameters (see the :doc:`./express` chapter) or through "
"websockets (see :doc:`./socketio` or :doc:`./primus`)."
msgstr ""

#: ../../source/api/services.rst:133
msgid ""
"``params.provider`` - The transport (``rest``, ``socketio`` or "
"``primus``) used for this service call. Will be ``undefined`` for "
"internal calls from the server (unless passed explicitly)."
msgstr ""
"``params.provider`` - The transport (``rest``, ``socketio`` or "
"``primus``) used for this service call. Will be ``undefined`` for "
"internal calls from the server (unless passed explicitly)."

#: ../../source/api/services.rst:136
msgid ":doc:`./authentication/server` or passed explicitly."
msgstr ""

#: ../../source/api/services.rst:137
msgid ""
"``params.connection`` - If the service call has been made by a real-time "
"transport (e.g. through websockets), ``params.connection`` is the "
"connection object that can be used with :doc:`./channels`."
msgstr ":doc:`./channels`."

#: ../../source/api/services.rst:144
#, fuzzy
msgid ""
"For external calls only ``params.query`` will be sent between the client "
"and server. If not passed, ``params.query`` will be ``undefined`` for "
"internal calls."
msgstr ""
"**Important:** For external calls only ``params.query`` will be sent "
"between the client and server. If not passed, ``params.query`` will be "
"``undefined`` for internal calls."

#: ../../source/api/services.rst:149
msgid ".find(params)"
msgstr ".find(params)"

#: ../../source/api/services.rst:151
msgid ""
"``service.find(params) -> Promise`` - Retrieves a list of all resources "
"from the service. Provider parameters will be passed as ``params.query``."
msgstr ""
"``service.find(params) -> Promise`` - Retrieves a list of all resources "
"from the service. Provider parameters will be passed as ``params.query``."

#: ../../source/api/services.rst:173
#, fuzzy
msgid ""
"``find`` does not have to return an array; it can also return an object. "
"The database adapters already do this for "
":ref:`databases/common_pagination`."
msgstr ""
"**Note:** ``find`` does not have to return an array; it can also return "
"an object. The database adapters already do this for `pagination "
"<./databases/common.md#pagination>`_."

#: ../../source/api/services.rst:178
msgid ".get(id, params)"
msgstr ".get(id, params)"

#: ../../source/api/services.rst:180
msgid ""
"``service.get(id, params) -> Promise`` - Retrieves a single resource with"
" the given ``id`` from the service."
msgstr ""
"``service.get(id, params) -> Promise`` - Retrieves a single resource with"
" the given ``id`` from the service."

#: ../../source/api/services.rst:195
msgid ".create(data, params)"
msgstr ".create(data, params)"

#: ../../source/api/services.rst:197
msgid ""
"``service.create(data, params) -> Promise`` - Creates a new resource with"
" ``data``. The method should return a ``Promise`` with the newly created "
"data. ``data`` may also be an array."
msgstr ""
"``service.create(data, params) -> Promise`` - Creates a new resource with"
" ``data``. The method should return a ``Promise`` with the newly created "
"data. ``data`` may also be an array."

#: ../../source/api/services.rst:215
#, fuzzy
msgid "A successful ``create`` method call emits the :ref:`events_created`."
msgstr ""
"**Important:** A successful ``create`` method call emits the ```created``"
" service event <./events.md#created>`_."

#: ../../source/api/services.rst:219
msgid ".update(id, data, params)"
msgstr ".update(id, data, params)"

#: ../../source/api/services.rst:221
msgid ""
"``service.update(id, data, params) -> Promise`` - Replaces the resource "
"identified by ``id`` with ``data``. The method should return a "
"``Promise`` with the complete, updated resource data. ``id`` can also be "
"``null`` when updating multiple records, with ``params.query`` containing"
" the query criteria."
msgstr ""
"``service.update(id, data, params) -> Promise`` - Replaces the resource "
"identified by ``id`` with ``data``. The method should return a "
"``Promise`` with the complete, updated resource data. ``id`` can also be "
"``null`` when updating multiple records, with ``params.query`` containing"
" the query criteria."

#: ../../source/api/services.rst:227
#, fuzzy
msgid "A successful ``update`` method call emits the :ref:`events_updated`."
msgstr ""
"**Important:** A successful ``update`` method call emits the ```updated``"
" service event <./events.md#updated>`_."

#: ../../source/api/services.rst:231
msgid ".patch(id, data, params)"
msgstr ".patch(id, data, params)"

#: ../../source/api/services.rst:233
msgid ""
"``patch(id, data, params) -> Promise`` - Merges the existing data of the "
"resource identified by ``id`` with the new ``data``. ``id`` can also be "
"``null`` indicating that multiple resources should be patched with "
"``params.query`` containing the query criteria."
msgstr ""
"``patch(id, data, params) -> Promise`` - Merges the existing data of the "
"resource identified by ``id`` with the new ``data``. ``id`` can also be "
"``null`` indicating that multiple resources should be patched with "
"``params.query`` containing the query criteria."

#: ../../source/api/services.rst:238
msgid ""
"The method should return with the complete, updated resource data. "
"Implement ``patch`` additionally (or instead of) ``update`` if you want "
"to distinguish between partial and full updates and support the ``PATCH``"
" HTTP method."
msgstr ""
"The method should return with the complete, updated resource data. "
"Implement ``patch`` additionally (or instead of) ``update`` if you want "
"to distinguish between partial and full updates and support the ``PATCH``"
" HTTP method."

#: ../../source/api/services.rst:243
#, fuzzy
msgid "A successful ``patch`` method call emits the :ref:`events_patched`."
msgstr ""
"**Important:** A successful ``patch`` method call emits the ```patched`` "
"service event <./events.md#patched>`_."

#: ../../source/api/services.rst:247
msgid ".remove(id, params)"
msgstr ".remove(id, params)"

#: ../../source/api/services.rst:249
msgid ""
"``service.remove(id, params) -> Promise`` - Removes the resource with "
"``id``. The method should return a ``Promise`` with the removed resource."
" ``id`` can also be ``null``, which indicates the deletion of multiple "
"resources, with ``params.query`` containing the query criteria."
msgstr ""
"``service.remove(id, params) -> Promise`` - Removes the resource with "
"``id``. The method should return a ``Promise`` with the removed resource."
" ``id`` can also be ``null``, which indicates the deletion of multiple "
"resources, with ``params.query`` containing the query criteria."

#: ../../source/api/services.rst:254
#, fuzzy
msgid "A successful ``remove`` method call emits the :ref:`events_remove`."
msgstr ""
"**Important:** A successful ``remove`` method call emits the ```removed``"
" service event <./events.md#remove>`_."

#: ../../source/api/services.rst:258
msgid ".setup(app, path)"
msgstr ".setup(app, path)"

#: ../../source/api/services.rst:260
msgid ""
"``service.setup(app, path) -> Promise`` is a special method that "
"initializes the service, passing an instance of the Feathers application "
"and the path it has been registered on."
msgstr ""
"``service.setup(app, path) -> Promise`` is a special method that "
"initializes the service, passing an instance of the Feathers application "
"and the path it has been registered on."

#: ../../source/api/services.rst:264
msgid ""
"For services registered before ``app.listen`` is invoked, the ``setup`` "
"function of each registered service is called on invoking ``app.listen``."
" For services registered after ``app.listen`` is invoked, ``setup`` is "
"called automatically by Feathers when a service is registered."
msgstr ""
"For services registered before ``app.listen`` is invoked, the ``setup`` "
"function of each registered service is called on invoking ``app.listen``."
" For services registered after ``app.listen`` is invoked, ``setup`` is "
"called automatically by Feathers when a service is registered."

#: ../../source/api/services.rst:270
msgid ""
"``setup`` is a great place to initialize your service with any special "
"configuration or if connecting services that are very tightly coupled "
"(see below), as opposed to using :doc:`hooks/readme`."
msgstr ":doc:`hooks/readme`."

#: ../../source/api/services.rst:318
msgid "Feathers functionality"
msgstr "Feathers功能"

#: ../../source/api/services.rst:320
msgid ""
"When registering a service, Feathers (or its plugins) can also add its "
"own methods to a service. Most notably, every service will automatically "
"become an instance of a `NodeJS EventEmitter "
"<https://nodejs.org/api/events.html#events_class_eventemitter>`_."
msgstr ""
"When registering a service, Feathers (or its plugins) can also add its "
"own methods to a service. Most notably, every service will automatically "
"become an instance of a `NodeJS EventEmitter "
"<https://nodejs.org/api/events.html#events_class_eventemitter>`_."

#: ../../source/api/services.rst:326
msgid ".hooks(hooks)"
msgstr ".hooks(hooks)"

#: ../../source/api/services.rst:328
msgid "Register :doc:`./hooks` for this service."
msgstr "Register :doc:`./hooks` for this service."

#: ../../source/api/services.rst:331
msgid ".publish([event, ] publisher)"
msgstr ".publish([event, ] publisher)"

#: ../../source/api/services.rst:333
msgid ""
"Register an event publishing callback. For more information, see the "
":doc:`./channels`."
msgstr ""
"Register an event publishing callback. For more information, see the "
":doc:`./channels`."

#: ../../source/api/services.rst:337
msgid ".mixin(mixin)"
msgstr ".mixin(mixin)"

#: ../../source/api/services.rst:339
msgid ""
"``service.mixin(mixin) -> service`` extends the functionality of a "
"service. For more information see the `Uberproto "
"<https://github.com/daffl/uberproto>`_ project page."
msgstr ""
"``service.mixin(mixin) -> service`` extends the functionality of a "
"service. For more information see the `Uberproto "
"<https://github.com/daffl/uberproto>`_ project page."

#: ../../source/api/services.rst:344
msgid ".on(eventname, listener)"
msgstr ".on(eventname, listener)"

#: ../../source/api/services.rst:346
msgid ""
"Provided by the core `NodeJS EventEmitter .on "
"<https://nodejs.org/api/events.html#events_emitter_on_eventname_listener>`_."
" Registers a ``listener`` method (``function(data) {}``) for the given "
"``eventname``."
msgstr ""
"Provided by the core `NodeJS EventEmitter .on "
"<https://nodejs.org/api/events.html#events_emitter_on_eventname_listener>`_."
" Registers a ``listener`` method (``function(data) {}``) for the given "
"``eventname``."

#: ../../source/api/services.rst:351 ../../source/api/services.rst:361
#: ../../source/api/services.rst:371
#, fuzzy
msgid "For more information about service events, see the :doc:`./events`."
msgstr ""
"**Important:** For more information about service events, see the "
":doc:`./events`."

#: ../../source/api/services.rst:355
msgid ".emit(eventname, data)"
msgstr ".emit(eventname, data)"

#: ../../source/api/services.rst:357
msgid ""
"Provided by the core `NodeJS EventEmitter .emit "
"<https://nodejs.org/api/events.html#events_emitter_emit_eventname_args>`_."
" Emits the event ``eventname`` to all event listeners."
msgstr ""
"Provided by the core `NodeJS EventEmitter .emit "
"<https://nodejs.org/api/events.html#events_emitter_emit_eventname_args>`_."
" Emits the event ``eventname`` to all event listeners."

#: ../../source/api/services.rst:365
msgid ".removeListener(eventname, [ listener ])"
msgstr ".removeListener(eventname, [ listener ])"

#: ../../source/api/services.rst:367
msgid ""
"Provided by the core `NodeJS EventEmitter .removeListener "
"<https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener>`_."
" Removes all listeners, or the given listener, for ``eventname``."
msgstr ""
"Provided by the core `NodeJS EventEmitter .removeListener "
"<https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener>`_."
" Removes all listeners, or the given listener, for ``eventname``."

#~ msgid ""
#~ "Service methods are pre-defined `CRUD"
#~ " <https://en.wikipedia.org/wiki/Create,_read,_update_and_delete>`_"
#~ " methods that your service object can"
#~ " implement (or that have already been"
#~ " implemented by one of the `database"
#~ " adapters <./databases/common.md>`_). Below is"
#~ " a complete example of the Feathers"
#~ " *service interface* as a normal "
#~ "JavaScript object either returning a "
#~ "```Promise`` <https://developer.mozilla.org/en-"
#~ "US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_ or"
#~ " using `async/await <https://developer.mozilla.org"
#~ "/en-US/docs/Web/JavaScript/Reference/Statements/async_function>`_:"
#~ msgstr ""

#~ msgid ""
#~ "**Important:** Always use the service "
#~ "returned by ``app.service(path)`` not the "
#~ "service object (the ``myService`` object "
#~ "above) directly. See the `app.service "
#~ "documentation <./application.md#servicepath>`_ for "
#~ "more information."
#~ msgstr ""

#~ msgid ""
#~ "**Important:** This section describes the "
#~ "general usage of service methods and "
#~ "how to implement them. They are "
#~ "already implemented by the official "
#~ "Feathers database adapters. For specifics "
#~ "on how to use the database "
#~ "adapters, see the `database adapters "
#~ "common API <./databases/common.md>`_."
#~ msgstr ""

#~ msgid ""
#~ "``params.query`` - the query parameters "
#~ "from the client, either passed as "
#~ "URL query parameters (see the "
#~ ":doc:`./express` chapter) or through "
#~ "websockets (see :doc:`./socketio` or `Primus"
#~ " <./primus.md>`_)."
#~ msgstr ""

#~ msgid ""
#~ "Service methods are pre-defined `CRUD"
#~ " <https://en.wikipedia.org/wiki/Create,_read,_update_and_delete>`_"
#~ " methods that your service object can"
#~ " implement (or that have already been"
#~ " implemented by one of the "
#~ ":doc:`database adapters <./databases/common>`_). "
#~ "Below is a complete example of the"
#~ " Feathers *service interface* as a "
#~ "normal JavaScript object either returning "
#~ "a ```Promise`` <https://developer.mozilla.org/en-"
#~ "US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_ or"
#~ " using `async/await <https://developer.mozilla.org"
#~ "/en-US/docs/Web/JavaScript/Reference/Statements/async_function>`_:"
#~ msgstr ""

#~ msgid ""
#~ "This section describes the general usage"
#~ " of service methods and how to "
#~ "implement them. They are already "
#~ "implemented by the official Feathers "
#~ "database adapters. For specifics on how"
#~ " to use the database adapters, see"
#~ " the :doc:`database adapters common API "
#~ "<./databases/common>`_."
#~ msgstr ""

#~ msgid ""
#~ "Service methods are pre-defined `CRUD"
#~ " <https://en.wikipedia.org/wiki/Create,_read,_update_and_delete>`_"
#~ " methods that your service object can"
#~ " implement (or that have already been"
#~ " implemented by one of the "
#~ ":doc:`database adapters <./databases/common>`). "
#~ "Below is a complete example of the"
#~ " Feathers *service interface* as a "
#~ "normal JavaScript object either returning "
#~ "a ```Promise`` <https://developer.mozilla.org/en-"
#~ "US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_ or"
#~ " using `async/await <https://developer.mozilla.org"
#~ "/en-US/docs/Web/JavaScript/Reference/Statements/async_function>`_:"
#~ msgstr ""

#~ msgid ""
#~ "This section describes the general usage"
#~ " of service methods and how to "
#~ "implement them. They are already "
#~ "implemented by the official Feathers "
#~ "database adapters. For specifics on how"
#~ " to use the database adapters, see"
#~ " the :doc:`database adapters common API "
#~ "<./databases/common>`."
#~ msgstr ""

#~ msgid ""
#~ ":doc:``params.user`` - The authenticated user,"
#~ " either set by `Feathers authentication "
#~ "<./authentication/server>` or passed explicitly."
#~ msgstr ":doc:`./authentication/server` or passed explicitly."

#~ msgid ""
#~ "“Services” are the heart of every "
#~ "Feathers application. Services are JavaScript"
#~ " objects (or instances of `ES6 "
#~ "classes "
#~ "<https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes>`_)"
#~ " that implement `certain methods "
#~ "<#service-methods>`_. Feathers itself will "
#~ "also add some `additional methods and"
#~ " functionality <#feathers-functionality>`_ to "
#~ "its services."
#~ msgstr ""
#~ "“Services” are the heart of every "
#~ "Feathers application. Services are JavaScript"
#~ " objects (or instances of `ES6 "
#~ "classes "
#~ "<https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes>`_)"
#~ " that implement `certain methods "
#~ "<#service-methods>`_. Feathers itself will "
#~ "also add some `additional methods and"
#~ " functionality <#feathers-functionality>`_ to "
#~ "its services."

#~ msgid ""
#~ "Service methods are pre-defined `CRUD"
#~ " <https://en.wikipedia.org/wiki/Create,_read,_update_and_delete>`_"
#~ " methods that your service object can"
#~ " implement (or that have already been"
#~ " implemented by one of the "
#~ ":doc:`./databases/common`.. Below is a "
#~ "complete example of the Feathers "
#~ "*service interface* as a normal "
#~ "JavaScript object either returning a "
#~ "```Promise`` <https://developer.mozilla.org/en-"
#~ "US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_ or"
#~ " using `async/await <https://developer.mozilla.org"
#~ "/en-US/docs/Web/JavaScript/Reference/Statements/async_function>`_:"
#~ msgstr ""

#~ msgid ""
#~ "{% codetabs name=“Promise”, type=“js” -%} "
#~ "const myService = { find(params) { "
#~ "return Promise.resolve([]); }, get(id, params)"
#~ " {}, create(data, params) {}, update(id,"
#~ " data, params) {}, patch(id, data, "
#~ "params) {}, remove(id, params) {}, "
#~ "setup(app, path) {} }"
#~ msgstr ""
#~ "{% codetabs name=“Promise”, type=“js” -%} "
#~ "const myService = { find(params) { "
#~ "return Promise.resolve([]); }, get(id, params)"
#~ " {}, create(data, params) {}, update(id,"
#~ " data, params) {}, patch(id, data, "
#~ "params) {}, remove(id, params) {}, "
#~ "setup(app, path) {} }"

#~ msgid ""
#~ "app.use(‘/my-service’, myService); {%- "
#~ "language name=“async/await”, type=“js” -%} "
#~ "const myService = { async find(params)"
#~ " { return []; }, async get(id, "
#~ "params) {}, async create(data, params) "
#~ "{}, async update(id, data, params) {},"
#~ " async patch(id, data, params) {}, "
#~ "async remove(id, params) {}, setup(app, "
#~ "path) {} }"
#~ msgstr ""
#~ "app.use(‘/my-service’, myService); {%- "
#~ "language name=“async/await”, type=“js” -%} "
#~ "const myService = { async find(params)"
#~ " { return []; }, async get(id, "
#~ "params) {}, async create(data, params) "
#~ "{}, async update(id, data, params) {},"
#~ " async patch(id, data, params) {}, "
#~ "async remove(id, params) {}, setup(app, "
#~ "path) {} }"

#~ msgid "app.use(‘/my-service’, myService); {%- endcodetabs %}"
#~ msgstr "app.use(‘/my-service’, myService); {%- endcodetabs %}"

#~ msgid ""
#~ "{%- codetabs name=“Promise”, type=“js” -%} "
#~ "class MyService { find(params) { return"
#~ " Promise.resolve([]); } get(id, params) {}"
#~ " create(data, params) {} update(id, data,"
#~ " params) {} patch(id, data, params) "
#~ "{} remove(id, params) {} setup(app, "
#~ "path) {} }"
#~ msgstr ""
#~ "{%- codetabs name=“Promise”, type=“js” -%} "
#~ "class MyService { find(params) { return"
#~ " Promise.resolve([]); } get(id, params) {}"
#~ " create(data, params) {} update(id, data,"
#~ " params) {} patch(id, data, params) "
#~ "{} remove(id, params) {} setup(app, "
#~ "path) {} }"

#~ msgid ""
#~ "app.use(‘/my-service’, new MyService()); {%-"
#~ " language name=“async/await”, type=“js” -%} "
#~ "class MyService { async find(params) {"
#~ " return []; } async get(id, params)"
#~ " {} async create(data, params) {} "
#~ "async update(id, data, params) {} async"
#~ " patch(id, data, params) {} async "
#~ "remove(id, params) {} setup(app, path) "
#~ "{} }"
#~ msgstr ""
#~ "app.use(‘/my-service’, new MyService()); {%-"
#~ " language name=“async/await”, type=“js” -%} "
#~ "class MyService { async find(params) {"
#~ " return []; } async get(id, params)"
#~ " {} async create(data, params) {} "
#~ "async update(id, data, params) {} async"
#~ " patch(id, data, params) {} async "
#~ "remove(id, params) {} setup(app, path) "
#~ "{} }"

#~ msgid "app.use(‘/my-service’, new MyService()); {%- endcodetabs %}"
#~ msgstr "app.use(‘/my-service’, new MyService()); {%- endcodetabs %}"

