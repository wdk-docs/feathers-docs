# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-22 19:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/api/application.rst:2
msgid "Application"
msgstr "应用"

#: ../../source/api/application.rst:4
msgid "|GitHub stars| |npm version| |Changelog|"
msgstr "|GitHub stars| |npm version| |Changelog|"

#: ../../source/api/application.rst:10
msgid ""
"The core ``@feathersjs/feathers`` module provides the ability to "
"initialize new Feathers application instances. It works in Node, React "
"Native and the browser (see the :doc:`./client` chapter for more "
"information). Each instance allows for registration and retrieval of "
":doc:`./hooks`, plugin configuration, and getting and setting "
"configuration options. An initialized Feathers application is referred to"
" as the **app object**."
msgstr ""
"核心 ``@feathersjs/feathers`` 模块提供了初始化新Feathers应用程序实例的功能.它适用于Node, React Native和浏览器(有关更多信息, 请参阅 :doc:`./client` 一章).每个实例都允许注册和检索 :doc:`./hooks`, 插件配置以及获取和设置配置选项.初始化的Feathers应用程序称为 **app对象**."

#: ../../source/api/application.rst:21
msgid ".use(path, service)"
msgstr ".use(path, service)"

#: ../../source/api/application.rst:23
msgid ":doc:`./services` on a given ``path``."
msgstr ""

#: ../../source/api/application.rst:40
msgid "``path`` can be ``/`` to register a service at the root level."
msgstr "``path`` 可以是 ``/`` 在根级别注册服务."

#: ../../source/api/application.rst:43
msgid ".service(path)"
msgstr ".service(path)"

#: ../../source/api/application.rst:45
msgid ""
":doc:`./services` for the given path. Feathers internally creates a new "
"object from each registered service. This means that the object returned "
"by ``app.service(path)`` will provide the same methods and functionality "
"as your original service object but also functionality added by Feathers "
"and its plugins like :doc:`./events` and :ref:`services_feathers-"
"functionality`. ``path`` can be the service name with or without leading "
"and trailing slashes."
msgstr "给定路径的 :doc:`./services`. Feathers在内部从每个注册的服务创建一个新对象.这意味着 ``app.service(path)`` 返回的对象将提供与原始服务对象相同的方法和功能, 但也提供Feathers及其插件添加的功能, 如 :doc:`./events` 和 :ref:`services_feathers-functionality`. ``path`` 可以是带或不带前导和斜杠的服务名称."

#: ../../source/api/application.rst:68
msgid ".hooks(hooks)"
msgstr ".hooks(hooks)"

#: ../../source/api/application.rst:70
msgid ""
"``app.hooks(hooks) -> app`` allows registration of application-level "
"hooks. For more information see the :ref:`hooks_application-hooks`."
msgstr "``app.hooks(hooks) - > app`` 允许注册应用程序级别的钩子.有关更多信息, 请参阅 :ref:`hooks_application-hooks`."

#: ../../source/api/application.rst:73
msgid ".publish([event, ] publisher)"
msgstr ".publish([event, ] publisher)"

#: ../../source/api/application.rst:75
msgid ""
"``app.publish([event, ] publisher) -> app`` registers a global event "
"publisher. For more information see the :ref:`channels_publishing` "
"chapter."
msgstr "``app.publish([event, ] publisher) - > app`` 注册一个全局事件发布者.有关更多信息, 请参阅 :ref:`channels_publishing` 一章."

#: ../../source/api/application.rst:78
msgid ".configure(callback)"
msgstr ".configure(callback)"

#: ../../source/api/application.rst:80
msgid ""
"``app.configure(callback) -> app`` runs a ``callback`` function that gets"
" passed the application object. It is used to initialize plugins or "
"services."
msgstr "``app.configure(callback) - > app`` 运行一个 ``callback`` 函数, 它传递了应用程序对象.它用于初始化插件或服务."

#: ../../source/api/application.rst:91
msgid ".listen(port)"
msgstr ".listen(port)"

#: ../../source/api/application.rst:93
msgid ""
"``app.listen([port]) -> HTTPServer`` starts the application on the given "
"port. It will set up all configured transports (if any) and then run "
"``app.setup(server)`` (see below) with the server object and then return "
"the server object."
msgstr ""
"``app.listen([port]) - > HTTPServer`` 在给定端口上启动应用程序.它将设置所有已配置的传输(如果有), 然后使用服务器对象运行 ``app.setup(server)`` (见下文), 然后返回服务器对象."

#: ../../source/api/application.rst:98
msgid ""
"``listen`` will only be available if a server side transport (REST, "
"Socket.io or Primus) has been configured."
msgstr ""
"只有配置了服务器端传输(REST, Socket.io或Primus)时, ``listen`` 才可用."

#: ../../source/api/application.rst:102
msgid ".setup([server])"
msgstr ".setup([server])"

#: ../../source/api/application.rst:104
msgid ""
"``app.setup([server]) -> app`` is used to initialize all services by "
"calling each :doc:`services#setupapp-path` method (if available). It will"
" also use the ``server`` instance passed (e.g. through "
"``http.createServer``) to set up SocketIO (if enabled) and any other "
"provider that might require the server instance."
msgstr ""
"``app.setup([server]) - > app`` 用于通过调用each :doc:`services #setupapp-path` 方法(如果可用)来初始化所有服务.它还将使用传递的``server``实例(例如通过 ``http.createServer``)来设置SocketIO(如果已启用)以及可能需要服务器实例的任何其他提供程序."

#: ../../source/api/application.rst:110
msgid ""
"Normally ``app.setup`` will be called automatically when starting the "
"application via ``app.listen([port])`` but there are cases when it needs "
"to be called explicitly."
msgstr ""
"通常``app.setup`` 将在通过 ``app.listen([port])`` 启动应用程序时自动调用, 但有时需要显式调用它."

#: ../../source/api/application.rst:113
msgid ".set(name, value)"
msgstr ".set(name, value)"

#: ../../source/api/application.rst:115
msgid "``app.set(name, value) -> app`` assigns setting ``name`` to ``value``."
msgstr "``app.set(name, value) -> app`` 将 ``name`` 设置为 ``value``."

#: ../../source/api/application.rst:118
msgid ".get(name)"
msgstr ".get(name)"

#: ../../source/api/application.rst:120
msgid ""
"``app.get(name) -> value`` retrieves the setting ``name``. For more "
"information on server side Express settings see the `Express "
"documentation <http://expressjs.com/en/4x/api.html#app.set>`_."
msgstr ""
"``app.get(name) -> value`` 检索设置 ``name``. 有关服务器端Express设置的更多信息, 请参阅 `Express文档 <http://expressjs.com/en/4x/api.html#app.set>`_."

#: ../../source/api/application.rst:130
msgid ".on(eventname, listener)"
msgstr ".on(eventname, listener)"

#: ../../source/api/application.rst:132
msgid ""
"Provided by the core `NodeJS EventEmitter .on "
"<https://nodejs.org/api/events.html#events_emitter_on_eventname_listener>`_."
" Registers a ``listener`` method (``function(data) {}``) for the given "
"``eventname``."
msgstr ""
"由核心 `NodeJS EventEmitter .on <https://nodejs.org/api/events.html#events_emitter_on_eventname_listener>`_ 提供.为给定的 ``eventname`` 注册一个 ``listener`` 方法(``function(data){}``)."

#: ../../source/api/application.rst:140
msgid ".emit(eventname, data)"
msgstr ".emit(eventname, data)"

#: ../../source/api/application.rst:142
msgid ""
"Provided by the core `NodeJS EventEmitter .emit "
"<https://nodejs.org/api/events.html#events_emitter_emit_eventname_args>`_."
" Emits the event ``eventname`` to all event listeners."
msgstr ""
"核心 `NodeJS EventEmitter .emit <https://nodejs.org/api/events.html#events_emitter_emit_eventname_args>`_ 提供.将事件 ``eventname`` 发送给所有事件侦听器."

#: ../../source/api/application.rst:154
msgid ".removeListener(eventname, [ listener ])"
msgstr ".removeListener(eventname, [ listener ])"

#: ../../source/api/application.rst:156
msgid ""
"Provided by the core `NodeJS EventEmitter .removeListener "
"<https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener>`_."
" Removes all or the given listener for ``eventname``."
msgstr ""
"核心 `NodeJS EventEmitter.removeListener <https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener>`_ 提供.删除 ``eventname`` 的全部或给定侦听器."

#: ../../source/api/application.rst:160
msgid ".mixins"
msgstr ".mixins"

#: ../../source/api/application.rst:162
msgid ""
"``app.mixins`` contains a list of service mixins. A mixin is a callback "
"(``(service, path) => {}``) that gets run for every service that is being"
" registered. Adding your own mixins allows to add functionality to every "
"registered service."
msgstr ""
"``app.mixins`` 包含服务混合列表. mixin是一个回调(``(service, path)=> {}``), 它为每个正在注册的服务运行.添加自己的mixins允许为每个注册的服务添加功能."

#: ../../source/api/application.rst:185
msgid ".services"
msgstr ".services"

#: ../../source/api/application.rst:187
msgid ""
":doc:`./services` keyed by the path they have been registered via "
"``app.use(path, service)``. This allows to return a list of all available"
" service names:"
msgstr ""
":doc:`./services` 由他们通过 ``app.use(path, service)`` 注册的路径键入.这允许返回所有可用服务名称的列表:"

#: ../../source/api/application.rst:201
msgid ""
"To retrieve services, the `app.service(path) <#servicepath>`_ method "
"should be used (not ``app.services.path`` directly)."
msgstr ""
"要检索服务, 应该使用 `app.service(path) <#servicepath>`_ 方法(而不是直接使用 ``app.services.path``)."

#: ../../source/api/application.rst:203
msgid ""
"A Feathers :doc:`client` does not know anything about the server it is "
"connected to. This means that ``app.services`` will *not* automatically "
"contain all services available on the server. Instead, the server has to "
"provide the list of its services, e.g. through a :doc:`./services`."
msgstr ""
"Feathers :doc:`client` 对它所连接的服务器一无所知.这意味着 ``app.services`` 将 *不会* 自​​动包含服务器上可用的所有服务.相反, 服务器必须提供其服务列表, 例如, 通过 :doc:`./services`."

#: ../../source/api/application.rst:218
msgid ".defaultService"
msgstr ".defaultService"

#: ../../source/api/application.rst:220
msgid ""
"``app.defaultService`` can be a function that returns an instance of a "
"new standard service for ``app.service(path)`` if there isn’t one "
"registered yet."
msgstr ""
"``app.defaultService`` 可以是一个函数, 如果还没有注册的那个, 则为 ``app.service(path)`` 返回一个新标准服务的实例."

#: ../../source/api/application.rst:231
msgid ""
"This is used by the :doc:`./client` to automatically register client side"
" services that talk to a Feathers server."
msgstr ""
"这由 :doc:`./client` 用于自动注册与Feathers服务器通信的客户端服务."
