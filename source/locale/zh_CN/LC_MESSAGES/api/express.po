# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-22 19:53+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/api/express.rst:2
msgid "Express"
msgstr "Express"

#: ../../source/api/express.rst:4
msgid "|npm version| |Changelog|"
msgstr "|npm version| |Changelog|"

#: ../../source/api/express.rst:10
msgid ""
"The ``@feathersjs/express`` module contains `Express "
"<http://expressjs.com/>`_ framework integrations for Feathers:"
msgstr ""
"``@feathersjs/express`` 模块包含用于Feathers的 `Express <http://expressjs.com/>`_ 框架集成:"

#: ../../source/api/express.rst:13
msgid ""
"The `Express framework bindings <#expressapp>`_ to make a Feathers "
"application Express compatible"
msgstr ""
"`Express框架绑定 <#expressapp>`_ 使Feathers应用程序Express兼容"

#: ../../source/api/express.rst:15
msgid ""
"An Express based transport to expose services through a `REST API "
"<#expressrest>`_"
msgstr ""
"An Express based transport to expose services through a `REST API "
"<#expressrest>`_"

#: ../../source/api/express.rst:17
msgid "An :doc:`./errors`"
msgstr ""

#: ../../source/api/express.rst:25
#, fuzzy
msgid ""
"**Very Important:** This page describes how to set up an Express server "
"and REST API. See the :doc:`./client/rest` how to use this server on the "
"client."
msgstr ""
"**Very Important:** This page describes how to set up an Express server "
"and REST API. See the :doc:`./client/rest` how to use this server on the "
"client."

#: ../../source/api/express.rst:28
#, fuzzy
msgid ""
"This chapter assumes that you are familiar with `Express "
"<http://expressjs.com/en/guide/routing.html>`_."
msgstr ""
"**Important:** This chapter assumes that you are familiar with `Express "
"<http://expressjs.com/en/guide/routing.html>`_."

#: ../../source/api/express.rst:32
msgid "express(app)"
msgstr "express(app)"

#: ../../source/api/express.rst:34
msgid ""
":doc:`./application` into a fully Express (4+) compatible application "
"that additionally to Feathers functionality also lets you use the "
"`Express API <http://expressjs.com/en/4x/api.html>`_."
msgstr ""

#: ../../source/api/express.rst:46
msgid ""
"Note that ``@feathersjs/express`` (``express``) also exposes the standard"
" `Express middleware <http://expressjs.com/en/4x/api.html#express>`_:"
msgstr ""
"Note that ``@feathersjs/express`` (``express``) also exposes the standard"
" `Express middleware <http://expressjs.com/en/4x/api.html#express>`_:"

#: ../../source/api/express.rst:50
msgid "``express.json`` - A JSON body parser"
msgstr "``express.json`` - A JSON body parser"

#: ../../source/api/express.rst:51
msgid "``express.urlencoded`` - A URL encoded form body parser"
msgstr "``express.urlencoded`` - A URL encoded form body parser"

#: ../../source/api/express.rst:52
msgid "``express.static`` - To statically host files in a folder"
msgstr "``express.static`` - To statically host files in a folder"

#: ../../source/api/express.rst:53
msgid "``express.Router`` - Creates an Express router object"
msgstr "``express.Router`` - Creates an Express router object"

#: ../../source/api/express.rst:58
msgid "express()"
msgstr "express()"

#: ../../source/api/express.rst:60
msgid ""
"If no Feathers application is passed, ``express() -> app`` returns a "
"plain Express application just like a normal call to Express would."
msgstr ""
"If no Feathers application is passed, ``express() -> app`` returns a "
"plain Express application just like a normal call to Express would."

#: ../../source/api/express.rst:64
msgid "app.use(path, service|mw|[mw])"
msgstr "app.use(path, service|mw|[mw])"

#: ../../source/api/express.rst:66
msgid ""
":doc:`./services`. an `Express middleware <http://expressjs.com/en/guide"
"/writing-middleware.html>`_ or an array of `Express middleware "
"<http://expressjs.com/en/guide/writing-middleware.html>`_ on the given "
"path. If :doc:`./services` is passed it will use Feathers registration "
"mechanism, for a middleware function Express."
msgstr ""
":doc:`./services`. an `Express middleware <http://expressjs.com/en/guide"
"/writing-middleware.html>`_ or an array of `Express middleware "
"<http://expressjs.com/en/guide/writing-middleware.html>`_ on the given "
"path. If :doc:`./services` is passed it will use Feathers registration "
"mechanism, for a middleware function Express."

#: ../../source/api/express.rst:100
msgid "app.listen(port)"
msgstr "app.listen(port)"

#: ../../source/api/express.rst:102
msgid ""
"``app.listen(port) -> HttpServer`` will first call Express `app.listen "
"<http://expressjs.com/en/4x/api.html#app.listen>`_ and then internally "
"also call the :ref:`application_setupserver`."
msgstr ""

#: ../../source/api/express.rst:114
msgid "app.setup(server)"
msgstr "app.setup(server)"

#: ../../source/api/express.rst:116
msgid ""
"``app.setup(server) -> app`` is usually called internally by "
"``app.listen`` but in the cases described below needs to be called "
"explicitly."
msgstr ""
"``app.setup(server) -> app`` is usually called internally by "
"``app.listen`` but in the cases described below needs to be called "
"explicitly."

#: ../../source/api/express.rst:121
msgid "Sub-Apps"
msgstr "Sub-Apps"

#: ../../source/api/express.rst:123
msgid ""
"When registering an application as a sub-app, ``app.setup(server)`` has "
"to be called to initialize the sub-apps services."
msgstr ""
"When registering an application as a sub-app, ``app.setup(server)`` has "
"to be called to initialize the sub-apps services."

#: ../../source/api/express.rst:144
#, fuzzy
msgid ""
"We recommend avoiding complex sub-app setups because websockets and "
"Feathers built in authentication are not fully sub-app aware at the "
"moment."
msgstr ""
"**ProTip:** We recommend avoiding complex sub-app setups because "
"websockets and Feathers built in authentication are not fully sub-app "
"aware at the moment."

#: ../../source/api/express.rst:149
msgid "HTTPS"
msgstr "HTTPS"

#: ../../source/api/express.rst:151
msgid ""
"HTTPS requires creating a separate server in which case "
"``app.setup(server)`` also has to be called explicitly."
msgstr ""
"HTTPS requires creating a separate server in which case "
"``app.setup(server)`` also has to be called explicitly."

#: ../../source/api/express.rst:173
msgid "Virtual Hosts"
msgstr "Virtual Hosts"

#: ../../source/api/express.rst:175
msgid ""
"The `vhost <https://github.com/expressjs/vhost>`_ Express middleware can "
"be used to run a Feathers application on a virtual host but again "
"requires ``app.setup(server)`` to be called explicitly."
msgstr ""
"The `vhost <https://github.com/expressjs/vhost>`_ Express middleware can "
"be used to run a Feathers application on a virtual host but again "
"requires ``app.setup(server)`` to be called explicitly."

#: ../../source/api/express.rst:198
msgid "express.rest()"
msgstr "express.rest()"

#: ../../source/api/express.rst:200
msgid ""
"``express.rest`` registers a Feathers transport mechanism that allows you"
" to expose and consume :doc:`./services` through a `RESTful API "
"<https://en.wikipedia.org/wiki/Representational_state_transfer>`_. This "
"means that you can call a service method through the ``GET``, ``POST``, "
"``PUT``, ``PATCH`` and ``DELETE`` `HTTP methods "
"<https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol>`_:"
msgstr ""
"``express.rest`` registers a Feathers transport mechanism that allows you"
" to expose and consume :doc:`./services` through a `RESTful API "
"<https://en.wikipedia.org/wiki/Representational_state_transfer>`_. This "
"means that you can call a service method through the ``GET``, ``POST``, "
"``PUT``, ``PATCH`` and ``DELETE`` `HTTP methods "
"<https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol>`_:"

#: ../../source/api/express.rst:209
msgid "Service method"
msgstr "Service method"

#: ../../source/api/express.rst:209
msgid "HTTP method"
msgstr "HTTP method"

#: ../../source/api/express.rst:209
msgid "Path"
msgstr "Path"

#: ../../source/api/express.rst:211
msgid ".find()"
msgstr ".find()"

#: ../../source/api/express.rst:211 ../../source/api/express.rst:212
msgid "GET"
msgstr "GET"

#: ../../source/api/express.rst:211 ../../source/api/express.rst:213
msgid "/messages"
msgstr "/messages"

#: ../../source/api/express.rst:212
msgid ".get()"
msgstr ".get()"

#: ../../source/api/express.rst:212 ../../source/api/express.rst:214
#: ../../source/api/express.rst:215 ../../source/api/express.rst:216
msgid "/messages/1"
msgstr "/messages/1"

#: ../../source/api/express.rst:213
msgid ".create()"
msgstr ".create()"

#: ../../source/api/express.rst:213
msgid "POST"
msgstr "POST"

#: ../../source/api/express.rst:214
msgid ".update()"
msgstr ".update()"

#: ../../source/api/express.rst:214
msgid "PUT"
msgstr "PUT"

#: ../../source/api/express.rst:215
msgid ".patch()"
msgstr ".patch()"

#: ../../source/api/express.rst:215
msgid "PATCH"
msgstr "PATCH"

#: ../../source/api/express.rst:216
msgid ".remove()"
msgstr ".remove()"

#: ../../source/api/express.rst:216
msgid "DELETE"
msgstr "DELETE"

#: ../../source/api/express.rst:219
msgid ""
"To expose services through a RESTful API we will have to configure "
"``express.rest`` and provide our own body parser middleware (usually the "
"standard `Express 4 body-parser <https://github.com/expressjs/body-"
"parser>`_) to make REST ``.create``, ``.update`` and ``.patch`` calls "
"parse the data in the HTTP body. If you would like to add other "
"middleware *before* the REST handler, call ``app.use(middleware)`` before"
" registering any services."
msgstr ""
"To expose services through a RESTful API we will have to configure "
"``express.rest`` and provide our own body parser middleware (usually the "
"standard `Express 4 body-parser <https://github.com/expressjs/body-"
"parser>`_) to make REST ``.create``, ``.update`` and ``.patch`` calls "
"parse the data in the HTTP body. If you would like to add other "
"middleware *before* the REST handler, call ``app.use(middleware)`` before"
" registering any services."

#: ../../source/api/express.rst:227
#, fuzzy
msgid ""
"The body-parser middleware has to be registered *before* any service. "
"Otherwise the service method will throw a ``No data provided`` or ``First"
" parameter for 'create' must be an object`` error."
msgstr ""
"**ProTip:** The body-parser middleware has to be registered *before* any "
"service. Otherwise the service method will throw a ``No data provided`` "
"or ``First parameter for 'create' must be an object`` error."

#: ../../source/api/express.rst:233
msgid "app.configure(express.rest())"
msgstr "app.configure(express.rest())"

#: ../../source/api/express.rst:235
msgid ""
"Configures the transport provider with a standard formatter sending JSON "
"response via `res.json <http://expressjs.com/en/4x/api.html#res.json>`_."
msgstr ""
"Configures the transport provider with a standard formatter sending JSON "
"response via `res.json <http://expressjs.com/en/4x/api.html#res.json>`_."

#: ../../source/api/express.rst:255
msgid "app.configure(express.rest(formatter))"
msgstr "app.configure(express.rest(formatter))"

#: ../../source/api/express.rst:257
msgid ""
"The default REST response formatter is a middleware that formats the data"
" retrieved by the service as JSON. If you would like to configure your "
"own ``formatter`` middleware pass a ``formatter(req, res)`` function. "
"This middleware will have access to ``res.data`` which is the data "
"returned by the service. `res.format "
"<http://expressjs.com/en/4x/api.html#res.format>`_ can be used for "
"content negotiation."
msgstr ""
"The default REST response formatter is a middleware that formats the data"
" retrieved by the service as JSON. If you would like to configure your "
"own ``formatter`` middleware pass a ``formatter(req, res)`` function. "
"This middleware will have access to ``res.data`` which is the data "
"returned by the service. `res.format "
"<http://expressjs.com/en/4x/api.html#res.format>`_ can be used for "
"content negotiation."

#: ../../source/api/express.rst:287
msgid "Custom service middleware"
msgstr "Custom service middleware"

#: ../../source/api/express.rst:289
msgid ""
"Custom Express middleware that only should run before or after a specific"
" service can be passed to ``app.use`` in the order it should run:"
msgstr ""
"Custom Express middleware that only should run before or after a specific"
" service can be passed to ``app.use`` in the order it should run:"

#: ../../source/api/express.rst:306
msgid ""
"Middleware that runs after the service has the service call information "
"available as"
msgstr ""
"Middleware that runs after the service has the service call information "
"available as"

#: ../../source/api/express.rst:309
msgid "``res.data`` - The data that will be sent"
msgstr "``res.data`` - The data that will be sent"

#: ../../source/api/express.rst:310
msgid ":doc:`./hooks` context of the service method call"
msgstr ":doc:`./hooks` context of the service method call"

#: ../../source/api/express.rst:313
msgid "For example ``updateData`` could look like this:"
msgstr "For example ``updateData`` could look like this:"

#: ../../source/api/express.rst:324
#, fuzzy
msgid ""
"If you run ``res.send`` in a custom middleware after the service and "
"don’t call ``next``, other middleware (like the REST formatter) will be "
"skipped. This can be used to e.g. render different views for certain "
"service method calls."
msgstr ""
"**ProTip:** If you run ``res.send`` in a custom middleware after the "
"service and don’t call ``next``, other middleware (like the REST "
"formatter) will be skipped. This can be used to e.g. render different "
"views for certain service method calls."

#: ../../source/api/express.rst:330
msgid "params"
msgstr "params"

#: ../../source/api/express.rst:332
msgid ""
"All middleware registered after the :doc:`./rest` will have access to the"
" ``req.feathers`` object to set properties on the service method "
"``params``:"
msgstr ""
"All middleware registered after the :doc:`./rest` will have access to the"
" ``req.feathers`` object to set properties on the service method "
"``params``:"

#: ../../source/api/express.rst:366
msgid ""
"You can see the parameters set by running the example and visiting "
"``http://localhost:3030/todos/test``."
msgstr ""
"You can see the parameters set by running the example and visiting "
"``http://localhost:3030/todos/test``."

#: ../../source/api/express.rst:369
msgid ""
"Avoid setting ``req.feathers = something`` directly since it may already "
"contain information that other Feathers plugins rely on. Adding "
"individual properties or using ``Object.assign(req.feathers, something)``"
" is the more reliable option."
msgstr ""
"Avoid setting ``req.feathers = something`` directly since it may already "
"contain information that other Feathers plugins rely on. Adding "
"individual properties or using ``Object.assign(req.feathers, something)``"
" is the more reliable option."

#: ../../source/api/express.rst:374
msgid ""
"**Very important:** Since the order of Express middleware matters, any "
"middleware that sets service parameters has to be registered *before* "
"your services (in a generated application before "
"``app.configure(services)`` or in ``middleware/index.js``)."
msgstr ""
"**Very important:** Since the order of Express middleware matters, any "
"middleware that sets service parameters has to be registered *before* "
"your services (in a generated application before "
"``app.configure(services)`` or in ``middleware/index.js``)."

#: ../../source/api/express.rst:381
#, fuzzy
msgid ""
"Although it may be convenient to set ``req.feathers.req = req;`` to have "
"access to the request object in the service, we recommend keeping your "
"services as provider independent as possible. There usually is a way to "
"pre-process your data in a middleware so that the service does not need "
"to know about the HTTP request or response."
msgstr ""
"**ProTip:** Although it may be convenient to set ``req.feathers.req = "
"req;`` to have access to the request object in the service, we recommend "
"keeping your services as provider independent as possible. There usually "
"is a way to pre-process your data in a middleware so that the service "
"does not need to know about the HTTP request or response."

#: ../../source/api/express.rst:389
msgid "params.query"
msgstr "params.query"

#: ../../source/api/express.rst:391
msgid ""
"``params.query`` will contain the URL query parameters sent from the "
"client. For the REST transport the query string is parsed using the `qs "
"<https://github.com/ljharb/qs>`_ module. For some query string examples "
"see the :doc:`./databases/querying` chapter."
msgstr ""
"``params.query`` will contain the URL query parameters sent from the "
"client. For the REST transport the query string is parsed using the `qs "
"<https://github.com/ljharb/qs>`_ module. For some query string examples "
"see the :doc:`./databases/querying` chapter."

#: ../../source/api/express.rst:397
msgid ""
"Only ``params.query`` is passed between the server and the client, other "
"parts of ``params`` are not. This is for security reasons so that a "
"client can’t set things like ``params.user`` or the database options. You"
" can always map from ``params.query`` to other :doc:`./hooks`."
msgstr ""
"Only ``params.query`` is passed between the server and the client, other "
"parts of ``params`` are not. This is for security reasons so that a "
"client can’t set things like ``params.user`` or the database options. You"
" can always map from ``params.query`` to other :doc:`./hooks`."

#: ../../source/api/express.rst:403
msgid "For example:"
msgstr "For example:"

#: ../../source/api/express.rst:409
msgid "Will set ``params.query`` to"
msgstr "Will set ``params.query`` to"

#: ../../source/api/express.rst:420
#, fuzzy
msgid ""
"Since the URL is just a string, there will be **no type conversion**. "
"This can be done manually in a :doc:`./hooks` or with the `query-types "
"<https://github.com/xpepermint/query-types>`_ Express middleware to "
"convert Boolean and Numeric types."
msgstr ""
"**ProTip:** Since the URL is just a string, there will be **no type "
"conversion**. This can be done manually in a :doc:`./hooks` or with the "
"`query-types <https://github.com/xpepermint/query-types>`_ Express "
"middleware to convert Boolean and Numeric types."

#: ../../source/api/express.rst:425
msgid ""
"If an array in your request consists of more than 20 items, the `qs "
"<https://www.npmjs.com/package/qs>`_ parser implicitly `converts "
"<https://github.com/ljharb/qs#parsing-arrays>`_ it to an object with "
"indices as keys. To extend this limit, you can set a custom query parser:"
" ``app.set('query parser', str => qs.parse(str, {arrayLimit: 1000}))``"
msgstr ""
"If an array in your request consists of more than 20 items, the `qs "
"<https://www.npmjs.com/package/qs>`_ parser implicitly `converts "
"<https://github.com/ljharb/qs#parsing-arrays>`_ it to an object with "
"indices as keys. To extend this limit, you can set a custom query parser:"
" ``app.set('query parser', str => qs.parse(str, {arrayLimit: 1000}))``"

#: ../../source/api/express.rst:433
msgid "``params.provider``"
msgstr "``params.provider``"

#: ../../source/api/express.rst:435
msgid ""
"For any :doc:`./services` made through REST :doc:`./hooks` this can for "
"example be used to prevent external users from making a service method "
"call:"
msgstr ""

#: ../../source/api/express.rst:454
msgid "params.route"
msgstr "params.route"

#: ../../source/api/express.rst:456
msgid "See the `routing section <#routing>`_."
msgstr "See the `routing section <#routing>`_."

#: ../../source/api/express.rst:459
msgid "express.notFound(options)"
msgstr "express.notFound(options)"

#: ../../source/api/express.rst:461
msgid ""
"``express.notFound()`` returns middleware that returns a ``NotFound`` "
"(404) :doc:`./errors`. It should be used as the last middleware "
"**before** the error handler. The following options are available:"
msgstr ""

#: ../../source/api/express.rst:466
msgid ""
"``verbose``: Set to ``true`` if the URL should be included in the error "
"message (default: ``false``)"
msgstr ""
"``verbose``: Set to ``true`` if the URL should be included in the error "
"message (default: ``false``)"

#: ../../source/api/express.rst:476
msgid "express.errorHandler()"
msgstr "express.errorHandler()"

#: ../../source/api/express.rst:478
msgid ""
"``expres.errorHandler`` is an `Express error handler "
"<https://expressjs.com/en/guide/error-handling.html>`_ middleware that "
"formats any error response to a REST call as JSON (or HTML if e.g. "
"someone hits our API directly in the browser) and sets the appropriate "
"error code."
msgstr ""
"``expres.errorHandler`` is an `Express error handler "
"<https://expressjs.com/en/guide/error-handling.html>`_ middleware that "
"formats any error response to a REST call as JSON (or HTML if e.g. "
"someone hits our API directly in the browser) and sets the appropriate "
"error code."

#: ../../source/api/express.rst:485
msgid ""
"You can still use any other Express compatible `error middleware "
"<http://expressjs.com/en/guide/error-handling.html>`_ with Feathers. In "
"fact, the ``express.errors`` is just a slightly customized one. **Very "
"Important:** Just as in Express, the error handler has to be registered "
"*after* all middleware and services."
msgstr ""

#: ../../source/api/express.rst:491
msgid "``app.use(express.errorHandler())``"
msgstr "``app.use(express.errorHandler())``"

#: ../../source/api/express.rst:493
msgid "Set up the error handler with the default configuration."
msgstr "Set up the error handler with the default configuration."

#: ../../source/api/express.rst:506
msgid "``app.use(express.errorHandler(options))``"
msgstr "``app.use(express.errorHandler(options))``"

#: ../../source/api/express.rst:533
#, fuzzy
msgid ""
"If you want to have the response in json format be sure to set the "
"``Accept`` header in your request to ``application/json`` otherwise the "
"default error handler will return HTML."
msgstr ""
"**ProTip:** If you want to have the response in json format be sure to "
"set the ``Accept`` header in your request to ``application/json`` "
"otherwise the default error handler will return HTML."

#: ../../source/api/express.rst:537
msgid ""
"The following options can be passed when creating a new localstorage "
"service:"
msgstr ""
"The following options can be passed when creating a new localstorage "
"service:"

#: ../../source/api/express.rst:540
msgid ""
"``html`` (Function|Object) [optional] - A custom formatter function or an"
" object that contains the path to your custom html error pages."
msgstr ""
"``html`` (Function|Object) [optional] - A custom formatter function or an"
" object that contains the path to your custom html error pages."

#: ../../source/api/express.rst:542
msgid ""
"``logger`` (Function|false) (default: ``console``) - Set a logger object "
"to log the error (it will be logger with ``logger.error(error)``"
msgstr ""
"``logger`` (Function|false) (default: ``console``) - Set a logger object "
"to log the error (it will be logger with ``logger.error(error)``"

#: ../../source/api/express.rst:548
#, fuzzy
msgid ""
"``html`` can also be set to ``false`` to disable html error pages "
"altogether so that only JSON is returned."
msgstr ""
"**ProTip:** ``html`` can also be set to ``false`` to disable html error "
"pages altogether so that only JSON is returned."

#: ../../source/api/express.rst:552
msgid "Routing"
msgstr "Routing"

#: ../../source/api/express.rst:554
msgid ""
"Express route placeholders in a service URL will be added to the services"
" ``params.route``."
msgstr ""
"Express route placeholders in a service URL will be added to the services"
" ``params.route``."

#: ../../source/api/express.rst:558
#, fuzzy
msgid ""
"See the :doc:`../faq/readme#how-do-i-do-nested-or-custom-routes` for more"
" details on when and when not to use nested routes."
msgstr ""
"**Important:** See the `FAQ entry on nested routes <../faq/readme.md#how-"
"do-i-do-nested-or-custom-routes>`_ for more details on when and when not "
"to use nested routes."

#~ msgid ""
#~ "``express(app) -> app`` is a function"
#~ " that turns a `Feathers application "
#~ "<./application.md>`_ into a fully Express "
#~ "(4+) compatible application that additionally"
#~ " to Feathers functionality also lets "
#~ "you use the `Express API "
#~ "<http://expressjs.com/en/4x/api.html>`_."
#~ msgstr ""

#~ msgid ""
#~ "``app.use(path, service|mw|[mw]) -> app`` "
#~ "registers either a `service object "
#~ "<./services.md>`_, an `Express middleware "
#~ "<http://expressjs.com/en/guide/writing-middleware.html>`_ "
#~ "or an array of `Express middleware "
#~ "<http://expressjs.com/en/guide/writing-middleware.html>`_ "
#~ "on the given path. If `a service"
#~ " object <./services.md>`_ is passed it "
#~ "will use Feathers registration mechanism, "
#~ "for a middleware function Express."
#~ msgstr ""

#~ msgid ""
#~ "``app.listen(port) -> HttpServer`` will first"
#~ " call Express `app.listen "
#~ "<http://expressjs.com/en/4x/api.html#app.listen>`_ and "
#~ "then internally also call the `Feathers"
#~ " app.setup(server) <./application.md#setupserver>`_."
#~ msgstr ""

#~ msgid ""
#~ "**Important:** Only ``params.query`` is passed"
#~ " between the server and the client,"
#~ " other parts of ``params`` are not."
#~ " This is for security reasons so "
#~ "that a client can’t set things "
#~ "like ``params.user`` or the database "
#~ "options. You can always map from "
#~ "``params.query`` to other ``params`` "
#~ "properties in a before :doc:`./hooks`."
#~ msgstr ""

#~ msgid ""
#~ "**Note:** If an array in your "
#~ "request consists of more than 20 "
#~ "items, the `qs <https://www.npmjs.com/package/qs>`_"
#~ " parser implicitly `converts "
#~ "<https://github.com/ljharb/qs#parsing-arrays>`_ it "
#~ "to an object with indices as keys."
#~ " To extend this limit, you can "
#~ "set a custom query parser: "
#~ "``app.set('query parser', str => qs.parse(str,"
#~ " {arrayLimit: 1000}))``"
#~ msgstr ""

#~ msgid ""
#~ ":doc:``express(app) -> app`` is a "
#~ "function that turns a `Feathers "
#~ "application <./application>`_ into a fully "
#~ "Express (4+) compatible application that "
#~ "additionally to Feathers functionality also"
#~ " lets you use the `Express API "
#~ "<http://expressjs.com/en/4x/api.html>`_."
#~ msgstr ""

#~ msgid ""
#~ ":doc:``app.use(path, service|mw|[mw]) -> app`` "
#~ "registers either a `service object "
#~ "<./services>`_, an `Express middleware "
#~ "<http://expressjs.com/en/guide/writing-middleware.html>`_ "
#~ "or an array of `Express middleware "
#~ "<http://expressjs.com/en/guide/writing-middleware.html>`_ "
#~ "on the given path. If :doc:`./services`"
#~ " is passed it will use Feathers "
#~ "registration mechanism, for a middleware "
#~ "function Express."
#~ msgstr ""

#~ msgid ""
#~ "``app.listen(port) -> HttpServer`` will first"
#~ " call Express `app.listen "
#~ "<http://expressjs.com/en/4x/api.html#app.listen>`_ and "
#~ "then internally also call the "
#~ ":doc:`Feathers app.setup(server) "
#~ "<./application#setupserver>`_."
#~ msgstr ""

#~ msgid ""
#~ "An :doc:`Express error handler "
#~ "<#expresserrorhandler>`_ for `Feathers    errors "
#~ "<./errors>`"
#~ msgstr "An `Express error handler <#expresserrorhandler>`_ for :doc:`./errors`"

#~ msgid ""
#~ ":doc:``express(app) -> app`` is a "
#~ "function that turns a `Feathers "
#~ "application <./application>` into a fully "
#~ "Express (4+) compatible application that "
#~ "additionally to Feathers functionality also"
#~ " lets you use the `Express API "
#~ "<http://expressjs.com/en/4x/api.html>`_."
#~ msgstr ""

#~ msgid ""
#~ ":doc:``app.use(path, service|mw|[mw]) -> app`` "
#~ "registers either a `service object "
#~ "<./services>`, an `Express middleware "
#~ "<http://expressjs.com/en/guide/writing-middleware.html>`_ "
#~ "or an array of `Express middleware "
#~ "<http://expressjs.com/en/guide/writing-middleware.html>`_ "
#~ "on the given path. If :doc:`./services`"
#~ " is passed it will use Feathers "
#~ "registration mechanism, for a middleware "
#~ "function Express."
#~ msgstr ""

#~ msgid ""
#~ "``app.listen(port) -> HttpServer`` will first"
#~ " call Express `app.listen "
#~ "<http://expressjs.com/en/4x/api.html#app.listen>`_ and "
#~ "then internally also call the "
#~ ":doc:`Feathers app.setup(server) "
#~ "<./application#setupserver>`."
#~ msgstr ""

#~ msgid ""
#~ "``app.listen(port) -> HttpServer`` will first"
#~ " call Express `app.listen "
#~ "<http://expressjs.com/en/4x/api.html#app.listen>`_ and "
#~ "then internally also call the "
#~ ":doc:`./application#setupserver`."
#~ msgstr ""

#~ msgid ""
#~ "**ProTip:** You can still use any "
#~ "other Express compatible `error middleware "
#~ "<http://expressjs.com/en/guide/error-handling.html>`_ with"
#~ " Feathers. In fact, the ``express.errors``"
#~ " is just a slightly customized one."
#~ " **Very Important:** Just as in "
#~ "Express, the error handler has to "
#~ "be registered *after* all middleware and"
#~ " services."
#~ msgstr ""
#~ "**ProTip:** You can still use any "
#~ "other Express compatible `error middleware "
#~ "<http://expressjs.com/en/guide/error-handling.html>`_ with"
#~ " Feathers. In fact, the ``express.errors``"
#~ " is just a slightly customized one."
#~ " **Very Important:** Just as in "
#~ "Express, the error handler has to "
#~ "be registered *after* all middleware and"
#~ " services."

