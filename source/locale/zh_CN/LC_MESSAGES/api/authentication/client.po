# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs
# package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2019.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-21 16:00+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.6.0\n"

#: ../../source/api/authentication/client.rst:2
msgid "Authentication Client"
msgstr "验证客户端"

#: ../../source/api/authentication/client.rst:4
msgid "|npm version| |Changelog|"
msgstr "|npm version| |Changelog|"

#: ../../source/api/authentication/client.rst:10
msgid ""
"The [@feathersjs/authentication-client](https://github.com/feathersjs"
"/authentication-client) module allows you to easily authenticate against "
"a Feathers server. It is not required, but makes it easier to implement "
"authentication in your client by automatically storing and sending the "
"JWT access token and handling re-authenticating when a websocket "
"disconnects."
msgstr ""
"[@ feathersjs / authentication-client]（https://github.com/feathersjs"
"/authentication-"
"client）模块允许您轻松地对Feathers服务器进行身份验证。它不是必需的，但通过自动存储和发送JWT访问令牌并在websocket断开连接时处理重新身份验证，可以更轻松地在客户端中实现身份验证。"

#: ../../source/api/authentication/client.rst:17
msgid "This module contains:"
msgstr "This module contains:"

#: ../../source/api/authentication/client.rst:19
msgid "`The main entry function <#configuration>`_"
msgstr "`The main entry function <#configuration>`_"

#: ../../source/api/authentication/client.rst:20
msgid "`Additional feathersClient methods <#additional-feathersclient-methods>`_"
msgstr "`Additional feathersClient methods <#additional-feathersclient-methods>`_"

#: ../../source/api/authentication/client.rst:22
msgid "`Some helpful hooks <#hooks>`_"
msgstr "`Some helpful hooks <#hooks>`_"

#: ../../source/api/authentication/client.rst:25
msgid "app.configure(auth(options))"
msgstr "app.configure(auth(options))"

#: ../../source/api/authentication/client.rst:27
msgid ""
"Setup is done the same as all Feathers plugins, using the ``configure`` "
"method:"
msgstr ""
"Setup is done the same as all Feathers plugins, using the ``configure`` "
"method:"

#: ../../source/api/authentication/client.rst:46
msgid ""
"**> The**\\ :doc:`client`\\ **(Rest, Socket, Primus…) must have been "
"initialized previously to the authentication plugin.**"
msgstr ""
"**> The**\\ :doc:`client`\\ **(Rest, Socket, Primus…) must have been "
"initialized previously to the authentication plugin.**"

#: ../../source/api/authentication/client.rst:51
msgid "Options"
msgstr "Options"

#: ../../source/api/authentication/client.rst:53
msgid ""
"The following default options will be mixed in with the settings you pass"
" in when configuring authentication. It will set the mixed options back "
"to to the app so that they are available at any time by "
"``app.get('auth')``. They can all be overridden."
msgstr "在配置身份验证时，以下默认选项将与您传入的设置混合在一起。它会将混合选项设置回应用程序，以便随时可以通过``app.get（'auth'）``使用它们。他们都可以被覆盖。"

#: ../../source/api/authentication/client.rst:72
msgid ""
"To enable storing the JWT make sure to provide a ``storage`` when "
"configuring the plugin. The following storage options are available:"
msgstr ""
"To enable storing the JWT make sure to provide a ``storage`` when "
"configuring the plugin. The following storage options are available:"

#: ../../source/api/authentication/client.rst:75
msgid ""
"``window.localStorage`` in the browser to use the browsers `localStorage "
"<https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage>`_"
msgstr ""
"``window.localStorage`` in the browser to use the browsers `localStorage "
"<https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage>`_"

#: ../../source/api/authentication/client.rst:77
msgid ""
"`AsyncStorage <https://facebook.github.io/react-"
"native/docs/asyncstorage.html>`_ for *React Native*"
msgstr ""
"`AsyncStorage <https://facebook.github.io/react-"
"native/docs/asyncstorage.html>`_ for *React Native*"

#: ../../source/api/authentication/client.rst:79
#, fuzzy
msgid ""
"`localForage <https://www.npmjs.com/package/localforage>`_ which helps "
"deal with older browsers and browsers in Incognito / Private Browsing "
"mode."
msgstr ""
"`localForage <https://www.npmjs.com/package/localforage>`_ which helps "
"deal with older browsers and browsers in Incognito/Private Browsing mode."

#: ../../source/api/authentication/client.rst:82
msgid ""
"`cookie-storage <https://www.npmjs.com/package/cookie-storage>`_ uses "
"cookies. It can be useful on devices that don’t support ``localStorage``."
msgstr ""
"`cookie-storage <https://www.npmjs.com/package/cookie-storage>`_ uses "
"cookies. It can be useful on devices that don’t support ``localStorage``."

#: ../../source/api/authentication/client.rst:87
msgid "app.authenticate()"
msgstr "app.authenticate()"

#: ../../source/api/authentication/client.rst:89
msgid ""
"``app.authenticate() -> Promise`` with no arguments will try to "
"authenticate using the JWT from the ``storage``. This is normally called "
"to either show your application (when successful) or showing a login page"
" or redirecting to the appropriate oAuth link."
msgstr ""
"没有参数的``app.authenticate（） - > "
"Promise``将尝试使用``storage``中的JWT进行身份验证。通常调用此方法来显示您的应用程序（成功时）或显示登录页面或重定向到相应的oAuth链接。"

#: ../../source/api/authentication/client.rst:104
msgid ""
"``app.authenticate()`` **has** to be called when you want to use the "
"token from storage and **only once** when the application initializes. "
"Once successful, all subsequent requests will send their authentication "
"information automatically."
msgstr ""
"``app.authenticate（）``**当你想在存储时使用令牌时** **，**只在应用程序初始化时** "
"**。一旦成功，所有后续请求将自动发送其身份验证信息。"

#: ../../source/api/authentication/client.rst:110
msgid "app.authenticate(options)"
msgstr "app.authenticate(options)"

#: ../../source/api/authentication/client.rst:112
msgid ""
"``app.authenticate(options) -> Promise`` will try to authenticate with a "
"Feathers server by passing a ``strategy`` and other properties as "
"credentials. It will use whichever transport has been setup on the client"
" (@feathersjs/rest-client, @feathersjs/socketio-client, or @feathersjs"
"/primus-client)."
msgstr ""
"``app.authenticate（options） - > "
"Promise``将尝试通过传递``strategy``和其他属性作为凭证来验证Feathers服务器。它将使用客户端上设置的任何传输（@ "
"feathersjs / rest-client，@ feathersjs / socketio-client或@ feathersjs / "
"primus-client）。"

#: ../../source/api/authentication/client.rst:142
msgid "``data {Object}`` - of the format ``{strategy [, ...otherProps]}``"
msgstr "``data {Object}`` - of the format ``{strategy [, ...otherProps]}``"

#: ../../source/api/authentication/client.rst:144
msgid ""
"``strategy {String}`` - the name of the strategy to be used to "
"authenticate. Required."
msgstr ""
"``strategy {String}`` - the name of the strategy to be used to "
"authenticate. Required."

#: ../../source/api/authentication/client.rst:146
msgid ""
"``...otherProps {Properties}`` vary depending on the chosen strategy. "
"Above is an example of using the ``jwt`` strategy. Below is one for the "
"``local`` strategy."
msgstr ""
"``...otherProps {Properties}`` vary depending on the chosen strategy. "
"Above is an example of using the ``jwt`` strategy. Below is one for the "
"``local`` strategy."

#: ../../source/api/authentication/client.rst:151
msgid "app.logout()"
msgstr "app.logout()"

#: ../../source/api/authentication/client.rst:153
msgid ""
"Removes the JWT accessToken from storage on the client. It also calls the"
" :doc:`./server` on the Feathers server."
msgstr ""
"Removes the JWT accessToken from storage on the client. It also calls the"
" :doc:`./server` on the Feathers server."

#: ../../source/api/authentication/client.rst:158
msgid "app.passport"
msgstr "app.passport"

#: ../../source/api/authentication/client.rst:160
msgid "``app.passport`` contains helper functions to work with the JWT."
msgstr "``app.passport`` contains helper functions to work with the JWT."

#: ../../source/api/authentication/client.rst:163
msgid "app.passport.getJWT()"
msgstr "app.passport.getJWT()"

#: ../../source/api/authentication/client.rst:165
msgid "Pull the JWT from ``storage`` or the cookie. Returns a Promise."
msgstr "Pull the JWT from ``storage`` or the cookie. Returns a Promise."

#: ../../source/api/authentication/client.rst:168
msgid "app.passport.verifyJWT(token)"
msgstr "app.passport.verifyJWT(token)"

#: ../../source/api/authentication/client.rst:170
msgid ""
"Verify that a JWT is not expired and decode it to get the payload. "
"Returns a Promise."
msgstr ""
"Verify that a JWT is not expired and decode it to get the payload. "
"Returns a Promise."

#: ../../source/api/authentication/client.rst:174
msgid "app.passport.payloadIsValid(token)"
msgstr "app.passport.payloadIsValid(token)"

#: ../../source/api/authentication/client.rst:176
msgid "Synchronously verify that a token has not expired. Returns a Boolean."
msgstr "Synchronously verify that a token has not expired. Returns a Boolean."

#: ../../source/api/authentication/client.rst:179
msgid "Authentication Events"
msgstr "Authentication Events"

#: ../../source/api/authentication/client.rst:181
msgid ""
"On the client authentication events are emitted on the app object "
"whenever a client successfully authenticates or “logs out”. These events "
"are emitted on the client."
msgstr ""
"On the client authentication events are emitted on the app object "
"whenever a client successfully authenticates or “logs out”. These events "
"are emitted on the client."

#: ../../source/api/authentication/client.rst:186
msgid "app.on(‘authenticated’, callback)"
msgstr "app.on(‘authenticated’, callback)"

#: ../../source/api/authentication/client.rst:189
msgid "app.on(‘logout’, callback)"
msgstr "app.on(‘logout’, callback)"

#: ../../source/api/authentication/client.rst:192
msgid "app.on(‘reauthentication-error’, errorHandler)"
msgstr "app.on(‘reauthentication-error’, errorHandler)"

#: ../../source/api/authentication/client.rst:194
msgid ""
"In the event that your server goes down or the client loses connectivity,"
" it will automatically handle attempting to re-authenticate the socket "
"when the client regains connectivity with the server. In order to handle "
"an authentication failure during automatic re-authentication you need to "
"implement the following event listener:"
msgstr "如果您的服务器出现故障或客户端失去连接，当客户端重新获得与服务器的连接时，它将自动处理尝试重新验证套接字的问题。为了在自动重新身份验证期间处理身份验证失败，您需要实现以下事件侦听器:"

#: ../../source/api/authentication/client.rst:216
msgid "Hooks"
msgstr "Hooks"

#: ../../source/api/authentication/client.rst:218
msgid ""
"There are 3 hooks. They are really meant for internal use and you "
"shouldn’t need to worry about them very often."
msgstr ""
"There are 3 hooks. They are really meant for internal use and you "
"shouldn’t need to worry about them very often."

#: ../../source/api/authentication/client.rst:221
msgid ""
"``populateAccessToken`` - Takes the token and puts in on "
"``hooks.params.accessToken`` in case you need it in one of your client "
"side services or hooks"
msgstr ""
"``populateAccessToken`` - Takes the token and puts in on "
"``hooks.params.accessToken`` in case you need it in one of your client "
"side services or hooks"

#: ../../source/api/authentication/client.rst:224
msgid "``populateHeader`` - Add the accessToken to the authorization header"
msgstr "``populateHeader`` - Add the accessToken to the authorization header"

#: ../../source/api/authentication/client.rst:225
msgid ""
"``populateEntity`` - Experimental. Populate an entity based on the JWT "
"payload."
msgstr ""
"``populateEntity`` - Experimental. Populate an entity based on the JWT "
"payload."

#: ../../source/api/authentication/client.rst:229
msgid "Complete Example"
msgstr "Complete Example"

#: ../../source/api/authentication/client.rst:231
msgid ""
"Here’s an example of a Feathers client that uses ``@feathersjs"
"/authentication-client``."
msgstr ""
"Here’s an example of a Feathers client that uses ``@feathersjs"
"/authentication-client``."

#~ msgid ""
#~ "**Important:** ``app.authenticate()`` **has** to "
#~ "be called when you want to use "
#~ "the token from storage and **only "
#~ "once** when the application initializes. "
#~ "Once successful, all subsequent requests "
#~ "will send their authentication information "
#~ "automatically."
#~ msgstr ""

