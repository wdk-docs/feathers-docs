# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-25 13:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/api/databases/common.rst:2
msgid "Common API"
msgstr ""

#: ../../source/api/databases/common.rst:4
msgid "All database adapters implement a common interface for initialization, pagination, extending and querying. This chapter describes the common adapter initialization and options, how to enable and use pagination, the details on how specific service methods behave and how to extend an adapter with custom functionality."
msgstr ""

#: ../../source/api/databases/common.rst:10
msgid "Every database adapter is an implementation of the :doc:`../services`. We recommend being familiar with services, service events and hooks before using a database adapter."
msgstr ""

#: ../../source/api/databases/common.rst:18
msgid "``service([options])``"
msgstr ""

#: ../../source/api/databases/common.rst:20
msgid "Returns a new service instance initialized with the given options."
msgstr ""

#: ../../source/api/databases/common.rst:29
msgid "**Options:**"
msgstr ""

#: ../../source/api/databases/common.rst:31
msgid "``id`` (*optional*) - The name of the id field property (usually set by default to ``id`` or ``_id``)."
msgstr ""

#: ../../source/api/databases/common.rst:33
msgid "``events`` (*optional*) - A list of `custom service events <../events#custom-events>`_ sent by this service"
msgstr ""

#: ../../source/api/databases/common.rst:35
msgid "``paginate`` (*optional*) - A `pagination object <#pagination>`_ containing a ``default`` and ``max`` page size"
msgstr ""

#: ../../source/api/databases/common.rst:37
msgid "``whitelist`` (*optional*) - A list of additional non-standard query parameters to allow (e.g ``[ '$regex', '$populate' ]``)"
msgstr ""

#: ../../source/api/databases/common.rst:39
msgid "``multi`` (*optional*, default: ``false``) - Allow ``create`` with arrays and ``update`` and ``remove`` with id ``null`` to change multiple items. Can be ``true`` for all methods or an array of allowed methods (e.g. ``[ 'remove', 'create' ]``)"
msgstr ""

#: ../../source/api/databases/common.rst:47
msgid "Pagination"
msgstr ""

#: ../../source/api/databases/common.rst:49
msgid "When initializing an adapter you can set the following pagination options in the ``paginate`` object:"
msgstr ""

#: ../../source/api/databases/common.rst:52
msgid "``default`` - Sets the default number of items when ``$limit`` is not set"
msgstr ""

#: ../../source/api/databases/common.rst:54
msgid "``max`` - Sets the maximum allowed number of items per page (even if the ``$limit`` query parameter is set higher)"
msgstr ""

#: ../../source/api/databases/common.rst:57
msgid "When ``paginate.default`` is set, ``find`` will return an *page object* (instead of the normal array) in the following form:"
msgstr ""

#: ../../source/api/databases/common.rst:69
msgid "The pagination options can be set as follows:"
msgstr ""

#: ../../source/api/databases/common.rst:98
msgid "Disabling or changing the default pagination is not available in the client. Only ``params.query`` is passed to the server (also see a `workaround here <https://github.com/feathersjs/feathers/issues/382#issuecomment-238407741>`_)"
msgstr ""

#: ../../source/api/databases/common.rst:102
msgid "To just get the number of available records set ``$limit`` to ``0``. This will only run a (fast) counting query against the database."
msgstr ""

#: ../../source/api/databases/common.rst:107
msgid "Service methods"
msgstr ""

#: ../../source/api/databases/common.rst:109
msgid "This section describes specifics on how the :doc:`../services` are implemented for all adapters."
msgstr ""

#: ../../source/api/databases/common.rst:112
msgid "adapter.Model"
msgstr ""

#: ../../source/api/databases/common.rst:114
msgid "If the ORM or database supports models, the model instance or reference to the collection belonging to this adapter can be found in ``adapter.Model``. This allows to easily make custom queries using that model, e.g. in a hook:"
msgstr ""

#: ../../source/api/databases/common.rst:139
msgid "adapter.find(params)"
msgstr ""

#: ../../source/api/databases/common.rst:141
msgid "``adapter.find(params) -> Promise`` returns a list of all records matching the query in :doc:`./querying`. Will either return an array with the results or a page object if `pagination is enabled <#pagination>`_."
msgstr ""

#: ../../source/api/databases/common.rst:145
msgid "When used via REST URLs all query values are strings. Depending on the database the values in ``params.query`` might have to be converted to the right type in a :doc:`../hooks`."
msgstr ""

#: ../../source/api/databases/common.rst:167
msgid "Find all messages for user with id 1"
msgstr ""

#: ../../source/api/databases/common.rst:173
msgid "Find all messages belonging to room 1 or 3"
msgstr ""

#: ../../source/api/databases/common.rst:180
msgid "adapter.get(id, params)"
msgstr ""

#: ../../source/api/databases/common.rst:182
msgid "``adapter.get(id, params) -> Promise`` retrieves a single record by its unique identifier (the field set in the ``id`` option during initialization)."
msgstr ""

#: ../../source/api/databases/common.rst:196
msgid "adapter.create(data, params)"
msgstr ""

#: ../../source/api/databases/common.rst:198
msgid "``adapter.create(data, params) -> Promise`` creates a new record with ``data``. ``data`` can also be an array to create multiple records."
msgstr ""

#: ../../source/api/databases/common.rst:223
msgid "adapter.update(id, data, params)"
msgstr ""

#: ../../source/api/databases/common.rst:225
msgid "``adapter.update(id, data, params) -> Promise`` completely replaces a single record identified by ``id`` with ``data``. Does not allow replacing multiple records (``id`` can’t be ``null``). ``id`` can not be changed."
msgstr ""

#: ../../source/api/databases/common.rst:243
msgid "adapter.patch(id, data, params)"
msgstr ""

#: ../../source/api/databases/common.rst:245
msgid "``adapter.patch(id, data, params) -> Promise`` merges a record identified by ``id`` with ``data``. ``id`` can be ``null`` to allow replacing multiple records (all records that match ``params.query`` the same as in ``.find``). ``id`` can not be changed."
msgstr ""

#: ../../source/api/databases/common.rst:270
msgid "Mark all unread messages as read"
msgstr ""

#: ../../source/api/databases/common.rst:278
msgid "adapter.remove(id, params)"
msgstr ""

#: ../../source/api/databases/common.rst:280
msgid "``adapter.remove(id, params) -> Promise`` removes a record identified by ``id``. ``id`` can be ``null`` to allow removing multiple records (all records that match ``params.query`` the same as in ``.find``)."
msgstr ""

#: ../../source/api/databases/common.rst:300
msgid "Remove all read messages"
msgstr ""

#: ../../source/api/databases/common.rst:307
msgid "Extending Adapters"
msgstr ""

#: ../../source/api/databases/common.rst:309
msgid "There are two ways to extend existing database adapters. Either by extending the ES6 base class or by adding functionality through hooks."
msgstr ""

#: ../../source/api/databases/common.rst:312
msgid "Keep in mind that calling the original service methods will return a Promise that resolves with the value."
msgstr ""

#: ../../source/api/databases/common.rst:316
msgid "Hooks"
msgstr ""

#: ../../source/api/databases/common.rst:318
msgid "The most flexible option is weaving in functionality through :doc:`../hooks`. For example, ``createdAt`` and ``updatedAt`` timestamps could be added like this:"
msgstr ""

#: ../../source/api/databases/common.rst:350
msgid "Classes (ES6)"
msgstr ""

#: ../../source/api/databases/common.rst:352
msgid "All modules also export an `ES6 class <https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes>`_ as ``Service`` that can be directly extended like this:"
msgstr ""

