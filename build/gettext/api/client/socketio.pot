# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-22 19:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/api/client/socketio.rst:2
msgid "Socket.io Client"
msgstr ""

#: ../../source/api/client/socketio.rst:4
msgid "We recommend using Feathers and the ``@feathersjs/socketio-client`` module on the client if possible. If however, you want to use a direct Socket.io connection without using Feathers on the client, see the `Direct connection <#direct-connection>`_ section."
msgstr ""

#: ../../source/api/client/socketio.rst:11
msgid "@feathersjs/socketio-client"
msgstr ""

#: ../../source/api/client/socketio.rst:13
msgid "|GitHub stars| |npm version| |Changelog|"
msgstr ""

#: ../../source/api/client/socketio.rst:19
msgid "The ``@feathersjs/socketio-client`` module allows to connect to services exposed through the :doc:`socketio` via a Socket.io socket."
msgstr ""

#: ../../source/api/client/socketio.rst:23
msgid "Socket.io is also used to *call* service methods. Using sockets for both calling methods and receiving real-time events is generally faster than using :doc:`./express`. There is therefore no need to use both REST and Socket.io in the same client application."
msgstr ""

#: ../../source/api/client/socketio.rst:30
msgid "socketio(socket)"
msgstr ""

#: ../../source/api/client/socketio.rst:32
msgid "Initialize the Socket.io client using a given socket and the default options."
msgstr ""

#: ../../source/api/client/socketio.rst:35
msgid "{% codetabs name=“Modular”, type=“js” -%} const feathers = require(‘@feathersjs/feathers’); const socketio = require(‘@feathersjs/socketio-client’); const io = require(‘socket.io-client’);"
msgstr ""

#: ../../source/api/client/socketio.rst:40
msgid "const socket = io(‘http://api.feathersjs.com’); const app = feathers();"
msgstr ""

#: ../../source/api/client/socketio.rst:42
msgid "// Set up Socket.io client with the socket app.configure(socketio(socket));"
msgstr ""

#: ../../source/api/client/socketio.rst:45
msgid "// Receive real-time events through Socket.io app.service(‘messages’) .on(‘created’, message => console.log(‘New message created’, message));"
msgstr ""

#: ../../source/api/client/socketio.rst:48
msgid "// Call the ``messages`` service app.service(‘messages’).create({ text: ‘A message from a REST client’ }); {%- language name=“@feathersjs/client”, type=“html” -%}"
msgstr ""

#: ../../source/api/client/socketio.rst:87
msgid "{%- endcodetabs %}"
msgstr ""

#: ../../source/api/client/socketio.rst:90
msgid "socketio(socket, options)"
msgstr ""

#: ../../source/api/client/socketio.rst:92
msgid "Initialize the Socket.io client with the specified socket and options."
msgstr ""

#: ../../source/api/client/socketio.rst:94
msgid "Options can be:"
msgstr ""

#: ../../source/api/client/socketio.rst:96
msgid "``timeout`` (default: 5000ms) - The time after which a method call fails and times out. This usually happens when calling a service or service method that does not exist."
msgstr ""

#: ../../source/api/client/socketio.rst:115
msgid "To set a service specific timeout you can use:"
msgstr ""

#: ../../source/api/client/socketio.rst:122
msgid "Direct connection"
msgstr ""

#: ../../source/api/client/socketio.rst:124
msgid "Feathers sets up a normal Socket.io server that you can connect to with any Socket.io compatible client, usually the `Socket.io client <http://socket.io/docs/client-api/>`_ either by loading the ``socket.io-client`` module or ``/socket.io/socket.io.js`` from the server. Unlike HTTP calls, websockets do not have an inherent cross-origin restriction in the browser so it is possible to connect to any Feathers server."
msgstr ""

#: ../../source/api/client/socketio.rst:133
msgid "which is where Feathers will set up Socket.io."
msgstr ""

#: ../../source/api/client/socketio.rst:149
msgid "Service methods can be called by emitting a ``<methodname>`` event followed by the service path and method parameters. The service path is the name the service has been registered with (in ``app.use``), without leading or trailing slashes. An optional callback following the ``function(error, data)`` Node convention will be called with the result of the method call or any errors that might have occurred."
msgstr ""

#: ../../source/api/client/socketio.rst:156
msgid "``params`` will be set as ``params.query`` in the service method call. Other service parameters can be set through a :doc:`../socketio`."
msgstr ""

#: ../../source/api/client/socketio.rst:159
msgid "If the service path or method does not exist, an appropriate Feathers error will be returned."
msgstr ""

#: ../../source/api/client/socketio.rst:163
msgid "Authentication"
msgstr ""

#: ../../source/api/client/socketio.rst:165
msgid "Sockets can be authenticated by sending the ``authenticate`` event with the ``strategy`` and the payload. For specific examples, see the “Direct Connection” section in the :doc:`../authentication/jwt` authentication chapters."
msgstr ""

#: ../../source/api/client/socketio.rst:185
msgid "find"
msgstr ""

#: ../../source/api/client/socketio.rst:187
msgid "Retrieves a list of all matching resources from the service"
msgstr ""

#: ../../source/api/client/socketio.rst:195
msgid "Will call ``app.service('messages').find({ query: { status: 'read', user: 10 } })`` on the server."
msgstr ""

#: ../../source/api/client/socketio.rst:200
msgid "get"
msgstr ""

#: ../../source/api/client/socketio.rst:202
msgid "Retrieve a single resource from the service."
msgstr ""

#: ../../source/api/client/socketio.rst:210
msgid "Will call ``app.service('messages').get(1, {})`` on the server."
msgstr ""

#: ../../source/api/client/socketio.rst:218
msgid "Will call ``app.service('messages').get(1, { query: { fetch: 'all' } })`` on the server."
msgstr ""

#: ../../source/api/client/socketio.rst:223
msgid "``create``"
msgstr ""

#: ../../source/api/client/socketio.rst:225
msgid "Create a new resource with ``data`` which may also be an array."
msgstr ""

#: ../../source/api/client/socketio.rst:235
msgid "Will call ``app.service('messages').create({ text: 'I really have to iron' }, {})`` on the server."
msgstr ""

#: ../../source/api/client/socketio.rst:246
msgid "Will call ``app.service('messages').create`` with the array."
msgstr ""

#: ../../source/api/client/socketio.rst:249
msgid "update"
msgstr ""

#: ../../source/api/client/socketio.rst:251
msgid "Completely replace a single or multiple resources."
msgstr ""

#: ../../source/api/client/socketio.rst:261
msgid "Will call ``app.service('messages').update(2, { text: 'I really have to do laundry' }, {})`` on the server. The ``id`` can also be ``null`` to update multiple resources:"
msgstr ""

#: ../../source/api/client/socketio.rst:272
msgid "Will call ``app.service('messages').update(null, { complete: true }, { query: { complete: 'false' } })`` on the server."
msgstr ""

#: ../../source/api/client/socketio.rst:276
msgid "``update`` is normally expected to replace an entire resource, which is why the database adapters only support ``patch`` for multiple records."
msgstr ""

#: ../../source/api/client/socketio.rst:281
msgid "patch"
msgstr ""

#: ../../source/api/client/socketio.rst:283
msgid "Merge the existing data of a single or multiple resources with the new ``data``."
msgstr ""

#: ../../source/api/client/socketio.rst:294
msgid "Will call ``app.service('messages').patch(2, { read: true }, {})`` on the server. The ``id`` can also be ``null`` to update multiple resources:"
msgstr ""

#: ../../source/api/client/socketio.rst:308
msgid "Will call ``app.service('messages').patch(null, { complete: true }, { query: { complete: false } })`` on the server, to change the status for all read app.service(‘messages’)."
msgstr ""

#: ../../source/api/client/socketio.rst:313
msgid "This is supported out of the box by the Feathers :doc:`../readme`"
msgstr ""

#: ../../source/api/client/socketio.rst:316
msgid "remove"
msgstr ""

#: ../../source/api/client/socketio.rst:318
msgid "Remove a single or multiple resources:"
msgstr ""

#: ../../source/api/client/socketio.rst:326
msgid "Will call ``app.service('messages').remove(2, { query: { cascade: true } })`` on the server. The ``id`` can also be ``null`` to remove multiple resources:"
msgstr ""

#: ../../source/api/client/socketio.rst:335
msgid "Will call ``app.service('messages').remove(null, { query: { read: 'true' } })`` on the server to delete all read app.service(‘messages’)."
msgstr ""

#: ../../source/api/client/socketio.rst:340
msgid "Listening to events"
msgstr ""

#: ../../source/api/client/socketio.rst:342
msgid "Listening to service events allows real-time behaviour in an application. :doc:`events` are sent to the socket in the form of ``servicepath eventname``."
msgstr ""

#: ../../source/api/client/socketio.rst:347
msgid "created"
msgstr ""

#: ../../source/api/client/socketio.rst:349
msgid "The ``created`` event will be published with the callback data, when a service ``create`` returns successfully."
msgstr ""

#: ../../source/api/client/socketio.rst:361
msgid "updated, patched"
msgstr ""

#: ../../source/api/client/socketio.rst:363
msgid "The ``updated`` and ``patched`` events will be published with the callback data, when a service ``update`` or ``patch`` method calls back successfully."
msgstr ""

#: ../../source/api/client/socketio.rst:382
msgid "removed"
msgstr ""

#: ../../source/api/client/socketio.rst:384
msgid "The ``removed`` event will be published with the callback data, when a service ``remove`` calls back successfully."
msgstr ""

