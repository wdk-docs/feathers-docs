# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-22 19:18+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/api/client/primus.rst:2
msgid "Primus Client"
msgstr ""

#: ../../source/api/client/primus.rst:4
msgid "We recommend using Feathers and the ``@feathersjs/primus-client`` module on the client if possible. To use a direct Primus connection without using Feathers on the client however see the `Direct connection <#direct-connection>`_ section."
msgstr ""

#: ../../source/api/client/primus.rst:10
msgid "Loading the Primus client library"
msgstr ""

#: ../../source/api/client/primus.rst:12
msgid "In the browser the Primus client library (usually at ``primus/primus.js``) always has to be loaded using a ``<script>`` tag:"
msgstr ""

#: ../../source/api/client/primus.rst:21
msgid "This will make the ``Primus`` object globally available. Module loader options are currently not available."
msgstr ""

#: ../../source/api/client/primus.rst:25
msgid "Client use in NodeJS"
msgstr ""

#: ../../source/api/client/primus.rst:27
msgid "In NodeJS a Primus client can be initialized as follows:"
msgstr ""

#: ../../source/api/client/primus.rst:42
msgid "@feathersjs/primus-client"
msgstr ""

#: ../../source/api/client/primus.rst:44
msgid "|GitHub stars| |npm version| |Changelog|"
msgstr ""

#: ../../source/api/client/primus.rst:50
msgid "The ``@feathersjs/primus-client`` module allows to connect to services exposed through the :doc:`primus` via the configured websocket library."
msgstr ""

#: ../../source/api/client/primus.rst:54
msgid "Primus sockets are also used to *call* service methods. Using sockets for both, calling methods and receiving real-time events is generally faster than using :doc:`./express` and there is no need to use both, REST and websockets in the same client application at the same time."
msgstr ""

#: ../../source/api/client/primus.rst:61
msgid "``primus(socket)``"
msgstr ""

#: ../../source/api/client/primus.rst:63
msgid "Initialize the Primus client using a given socket and the default options."
msgstr ""

#: ../../source/api/client/primus.rst:66
msgid "{% codetabs name=“Modular”, type=“js” -%} const feathers = require(‘@feathersjs/feathers’); const primusClient = require(‘@feathersjs/primus-client’); const socket = new Primus(‘http://api.my-feathers-server.com’);"
msgstr ""

#: ../../source/api/client/primus.rst:71
msgid "const app = feathers();"
msgstr ""

#: ../../source/api/client/primus.rst:73
msgid "app.configure(primusClient(socket));"
msgstr ""

#: ../../source/api/client/primus.rst:75
msgid "// Receive real-time events through Primus app.service(‘messages’) .on(‘created’, message => console.log(‘New message created’, message));"
msgstr ""

#: ../../source/api/client/primus.rst:78
msgid "// Call the ``messages`` service app.service(‘messages’).create({ text: ‘A message from a REST client’ }); {%- language name=“@feathersjs/client”, type=“html” -%}"
msgstr ""

#: ../../source/api/client/primus.rst:114
msgid "{%- endcodetabs %}"
msgstr ""

#: ../../source/api/client/primus.rst:117
msgid "``primus(socket, options)``"
msgstr ""

#: ../../source/api/client/primus.rst:119
msgid "Initialize the Primus client using a given socket and the given options."
msgstr ""

#: ../../source/api/client/primus.rst:121
msgid "Options can be:"
msgstr ""

#: ../../source/api/client/primus.rst:123
msgid "``timeout`` (default: 5000ms) - The time after which a method call fails and times out. This usually happens when calling a service or service method that does not exist."
msgstr ""

#: ../../source/api/client/primus.rst:137
msgid "The timeout per service can be changed like this:"
msgstr ""

#: ../../source/api/client/primus.rst:144
msgid "Direct connection"
msgstr ""

#: ../../source/api/client/primus.rst:146
msgid "In the browser, the connection can be established by loading the client from ``primus/primus.js`` and instantiating a new ``Primus`` instance. Unlike HTTP calls, websockets do not have a cross-origin restriction in the browser so it is possible to connect to any Feathers server."
msgstr ""

#: ../../source/api/client/primus.rst:151
msgid "See the `Primus docs <https://github.com/primus/primus#connecting-from-the-browser>`_ for more details."
msgstr ""

#: ../../source/api/client/primus.rst:156
msgid "which is where Feathers will set up Primus."
msgstr ""

#: ../../source/api/client/primus.rst:165
msgid "Service methods can be called by emitting a ``<servicepath>::<methodname>`` event with the method parameters. ``servicepath`` is the name the service has been registered with (in ``app.use``) without leading or trailing slashes. An optional callback following the ``function(error, data)`` Node convention will be called with the result of the method call or any errors that might have occurred."
msgstr ""

#: ../../source/api/client/primus.rst:173
msgid "``params`` will be set as ``params.query`` in the service method call. Other service parameters can be set through a :doc:`primus`."
msgstr ""

#: ../../source/api/client/primus.rst:177
msgid "Authentication"
msgstr ""

#: ../../source/api/client/primus.rst:179
msgid "Sockets can be authenticated by sending the ``authenticate`` event with the ``strategy`` and the payload. For specific examples see the “Direct Connection” section in the :doc:`../authentication/jwt` authentication chapters."
msgstr ""

#: ../../source/api/client/primus.rst:196
msgid "``find``"
msgstr ""

#: ../../source/api/client/primus.rst:198
msgid "Retrieves a list of all matching resources from the service"
msgstr ""

#: ../../source/api/client/primus.rst:206
msgid "Will call ``app.service('messages').find({ query: { status: 'read', user: 10 } })`` on the server."
msgstr ""

#: ../../source/api/client/primus.rst:211
msgid "get"
msgstr ""

#: ../../source/api/client/primus.rst:213
msgid "Retrieve a single resource from the service."
msgstr ""

#: ../../source/api/client/primus.rst:221
msgid "Will call ``app.service('messages').get(1, {})`` on the server."
msgstr ""

#: ../../source/api/client/primus.rst:229
msgid "Will call ``app.service('messages').get(1, { query: { fetch: 'all' } })`` on the server."
msgstr ""

#: ../../source/api/client/primus.rst:234
msgid "create"
msgstr ""

#: ../../source/api/client/primus.rst:236
msgid "Create a new resource with ``data`` which may also be an array."
msgstr ""

#: ../../source/api/client/primus.rst:246
msgid "Will call ``app.service('messages').create({ \"text\": \"I really have to iron\" }, {})`` on the server."
msgstr ""

#: ../../source/api/client/primus.rst:257
msgid "Will call ``app.service('messages').create`` on the server with the array."
msgstr ""

#: ../../source/api/client/primus.rst:261
msgid "update"
msgstr ""

#: ../../source/api/client/primus.rst:263
msgid "Completely replace a single or multiple resources."
msgstr ""

#: ../../source/api/client/primus.rst:273
msgid "Will call ``app.service('messages').update(2, { \"text\": \"I really have to do laundry\" }, {})`` on the server. The ``id`` can also be ``null`` to update multiple resources:"
msgstr ""

#: ../../source/api/client/primus.rst:284
msgid "Will call ``app.service('messages').update(null, { complete: true }, { query: { complete: false } })`` on the server."
msgstr ""

#: ../../source/api/client/primus.rst:288
msgid "``update`` is normally expected to replace an entire resource which is why the database adapters only support ``patch`` for multiple records."
msgstr ""

#: ../../source/api/client/primus.rst:293
msgid "patch"
msgstr ""

#: ../../source/api/client/primus.rst:295
msgid "Merge the existing data of a single or multiple resources with the new ``data``."
msgstr ""

#: ../../source/api/client/primus.rst:306
msgid "Will call ``app.service('messages').patch(2, { \"read\": true }, {})`` on the server. The ``id`` can also be ``null`` to update multiple resources:"
msgstr ""

#: ../../source/api/client/primus.rst:320
msgid "Will call ``app.service('messages').patch(null, { complete: true }, { query: { complete: false } })`` on the server to change the status for all read app.service(‘messages’)."
msgstr ""

#: ../../source/api/client/primus.rst:324
msgid "This is supported out of the box by the Feathers :doc:`../readme`"
msgstr ""

#: ../../source/api/client/primus.rst:327
msgid "remove"
msgstr ""

#: ../../source/api/client/primus.rst:329
msgid "Remove a single or multiple resources:"
msgstr ""

#: ../../source/api/client/primus.rst:337
msgid "Will call ``app.service('messages').remove(2, { query: { cascade: true } })`` on the server. The ``id`` can also be ``null`` to remove multiple resources:"
msgstr ""

#: ../../source/api/client/primus.rst:346
msgid "Will call ``app.service('messages').remove(null, { query: { read: 'true' } })`` on the server to delete all read app.service(‘messages’)."
msgstr ""

#: ../../source/api/client/primus.rst:351
msgid "Listening to events"
msgstr ""

#: ../../source/api/client/primus.rst:353
msgid "Listening to service events allows real-time behaviour in an application. :doc:`../events` are sent to the socket in the form of ``servicepath eventname``."
msgstr ""

#: ../../source/api/client/primus.rst:358
msgid "created"
msgstr ""

#: ../../source/api/client/primus.rst:360
msgid "The ``created`` event will be published with the callback data when a service ``create`` returns successfully."
msgstr ""

#: ../../source/api/client/primus.rst:370
msgid "updated, patched"
msgstr ""

#: ../../source/api/client/primus.rst:372
msgid "The ``updated`` and ``patched`` events will be published with the callback data when a service ``update`` or ``patch`` method calls back successfully."
msgstr ""

#: ../../source/api/client/primus.rst:389
msgid "removed"
msgstr ""

#: ../../source/api/client/primus.rst:391
msgid "The ``removed`` event will be published with the callback data when a service ``remove`` calls back successfully."
msgstr ""

