# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-25 13:32+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/api/events.rst:2
msgid "Events"
msgstr ""

#: ../../source/api/events.rst:4
msgid "Events are the key part of Feathers real-time functionality. All events in Feathers are provided through the `NodeJS EventEmitter <https://nodejs.org/api/events.html>`_ interface. This section describes"
msgstr ""

#: ../../source/api/events.rst:8
msgid "A quick overview of the `NodeJS EventEmitter interface <#eventemitters>`_"
msgstr ""

#: ../../source/api/events.rst:9
msgid "The standard `service events <#service-events>`_"
msgstr ""

#: ../../source/api/events.rst:10
msgid "How to allow sending `custom events <#custom-events>`_ from the server to the client"
msgstr ""

#: ../../source/api/events.rst:15
msgid "For more information on how to send real-time events to clients, see the :doc:`./channels`."
msgstr ""

#: ../../source/api/events.rst:19
msgid "EventEmitters"
msgstr ""

#: ../../source/api/events.rst:21
msgid "Once registered, any :doc:`./services` gets turned into a standard `NodeJS EventEmitter <https://nodejs.org/api/events.html>`_ and can be used accordingly."
msgstr ""

#: ../../source/api/events.rst:55
msgid "Service Events"
msgstr ""

#: ../../source/api/events.rst:57
msgid "Any service automaticaly emits ``created``, ``updated``, ``patched`` and ``removed`` events when the respective service method returns successfully. This works on the client as well as on the server. When the client is using :doc:`socketio` or :doc:`primus`, events will be pushed automatically from the server to all connected clients. This is essentially how Feathers does real-time."
msgstr ""

#: ../../source/api/events.rst:65
msgid "Events are not fired until all of your :doc:`./hooks` have executed."
msgstr ""

#: ../../source/api/events.rst:74
msgid "For information on how those events are published for real-time updates to connected clients, see the :doc:`./channels`."
msgstr ""

#: ../../source/api/events.rst:77
msgid "Additionally to the event ``data``, all events also get the `hook context <./hooks>`_ from their method call passed as the second parameter."
msgstr ""

#: ../../source/api/events.rst:81
msgid "created"
msgstr ""

#: ../../source/api/events.rst:83
msgid "The ``created`` event will fire with the result data when a service ``create`` returns successfully."
msgstr ""

#: ../../source/api/events.rst:107
msgid "updated, patched"
msgstr ""

#: ../../source/api/events.rst:109
msgid "The ``updated`` and ``patched`` events will fire with the callback data when a service ``update`` or ``patch`` method calls back successfully."
msgstr ""

#: ../../source/api/events.rst:141
msgid "removed"
msgstr ""

#: ../../source/api/events.rst:143
msgid "The ``removed`` event will fire with the callback data when a service ``remove`` calls back successfully."
msgstr ""

#: ../../source/api/events.rst:165
msgid "Custom events"
msgstr ""

#: ../../source/api/events.rst:167
msgid "By default, real-time clients will only receive the `standard events <#service-events>`_. However, it is possible to define a list of custom events on a service as ``service.events`` that should also be passed when ``service.emit('customevent', data)`` is called on the server. The ``context`` for custom events wonâ€™t be a full hook context but just an object containing ``{ app, service, path, result }``."
msgstr ""

#: ../../source/api/events.rst:173
msgid "Custom events can only be sent from the server to the client, not the other way (client to server). :ref:`faq_how-do-i-create-custom-methods`"
msgstr ""

#: ../../source/api/events.rst:176
msgid "For example, a payment service that sends status events to the client while processing a payment could look like this:"
msgstr ""

#: ../../source/api/events.rst:196
msgid "The :doc:`./databases/common` also take a list of custom events as an :ref:`databases_common_serviceoptions`."
msgstr ""

#: ../../source/api/events.rst:207
msgid "Using ``service.emit`` custom events can also be sent in a hook:"
msgstr ""

#: ../../source/api/events.rst:219
msgid "Custom events can be :ref:`channels_publishing` just like standard events and listened to it in a :ref:`client_socketio_listening-to-events`."
msgstr ""

