# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-25 16:01+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/api/channels.rst:2
msgid "Event channels"
msgstr ""

#: ../../source/api/channels.rst:4
msgid "On a Feathers server with a real-time transport (:doc:`./primus`) set up, event channels determine which connected clients to send :doc:`./events` to and how the sent data should look like."
msgstr ""

#: ../../source/api/channels.rst:8
msgid "This chapter describes:"
msgstr ""

#: ../../source/api/channels.rst:10
msgid "`Real-time Connections <#connections>`_ and how to access them"
msgstr ""

#: ../../source/api/channels.rst:11
msgid "`Channel usage <#channels>`_ and how to retrieve, join and leave channels"
msgstr ""

#: ../../source/api/channels.rst:13
msgid "`Publishing events <#publishing>`_ to channels"
msgstr ""

#: ../../source/api/channels.rst:17
msgid "If you are not using a real-time transport server (e.g. when making a REST only API or using Feathers on the client), channel functionality is not going to be available."
msgstr ""

#: ../../source/api/channels.rst:21
msgid "Some examples where channels are used:"
msgstr ""

#: ../../source/api/channels.rst:23
msgid "Real-time events should only be sent to authenticated users"
msgstr ""

#: ../../source/api/channels.rst:24
msgid "Users should only get updates about messages if they joined a certain chat room"
msgstr ""

#: ../../source/api/channels.rst:26
msgid "Only users in the same organization should receive real-time updates about their data changes"
msgstr ""

#: ../../source/api/channels.rst:28
msgid "Only admins should be notified when new users are created"
msgstr ""

#: ../../source/api/channels.rst:29
msgid "When a user is created, modified or removed, non-admins should only receive a “safe” version of the user object (e.g. only ``email``, ``id`` and ``avatar``)"
msgstr ""

#: ../../source/api/channels.rst:34
msgid "Example"
msgstr ""

#: ../../source/api/channels.rst:36
msgid "The example below shows the generated ``channels.js`` file illustrating how the different parts fit together:"
msgstr ""

#: ../../source/api/channels.rst:78
msgid "Connections"
msgstr ""

#: ../../source/api/channels.rst:80
msgid "A connection is an object that represents a real-time connection. It is the same object as ``socket.feathers`` in a :doc:`./socketio` and ``socket.request.feathers`` in a :doc:`./primus` middleware. You can add any kind of information to it but most notably, when using :doc:`./authentication/server`, it will contain the authenticated user. By default it is located in ``connection.user`` once the client has authenticated on the socket (usually by calling :doc:`./client`)."
msgstr ""

#: ../../source/api/channels.rst:90
msgid "We can get access to the ``connection`` object by listening to ``app.on('connection', connection => {})`` or ``app.on('login', (payload, { connection }) => {})``."
msgstr ""

#: ../../source/api/channels.rst:94
msgid "When a connection is terminated it will be automatically removed from all channels."
msgstr ""

#: ../../source/api/channels.rst:98
msgid "app.on(‘connection’)"
msgstr ""

#: ../../source/api/channels.rst:100
msgid "``app.on('connection', connection => {})`` is fired every time a new real-time connection is established. This is a good place to add the connection to a channel for anonymous users (in case we want to send any real-time updates to them):"
msgstr ""

#: ../../source/api/channels.rst:114
msgid "app.on(‘login’)"
msgstr ""

#: ../../source/api/channels.rst:116
msgid "``app.on('login', (payload, info) => {})`` is sent by the :doc:`./authentication/server` and also contains the connection in the ``info`` object that is passed as the second parameter."
msgstr ""

#: ../../source/api/channels.rst:121
msgid "that it can also be ``undefined`` if the login happened through e.g. REST which does not support real-time connectivity."
msgstr ""

#: ../../source/api/channels.rst:124
msgid "This is a good place to add the connection to channels related to the user (e.g. chat rooms, admin status etc.)"
msgstr ""

#: ../../source/api/channels.rst:157
msgid "``(user, { connection })`` is an ES6 shorthand for ``(user, meta) => { const connection = meta.connection; }``, see `Destructuring assignment <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment>`_."
msgstr ""

#: ../../source/api/channels.rst:163
msgid "app.on(‘logout’)"
msgstr ""

#: ../../source/api/channels.rst:165
msgid "``app.on('logout', (payload, info) => {})`` is sent by the :doc:`./authentication/server` and also contains the connection in the ``info`` object that is passed as the second parameter when a logout happens."
msgstr ""

#: ../../source/api/channels.rst:170
msgid "If the socket does not also disconnect at logout this is where users should be removed from their channels:"
msgstr ""

#: ../../source/api/channels.rst:184
msgid "Channels"
msgstr ""

#: ../../source/api/channels.rst:186
msgid "A channel is an object that contains a number of connections. It can be created via ``app.channel`` and allows a connection to join or leave it."
msgstr ""

#: ../../source/api/channels.rst:190
msgid "app.channel(…names)"
msgstr ""

#: ../../source/api/channels.rst:192
msgid "``app.channel(name) -> Channel``, when given a single name, returns an existing or new named channel:"
msgstr ""

#: ../../source/api/channels.rst:200
msgid "``app.channel(name1, name2, ... nameN) -> Channel``, when given multiples names, will return a combined channel. A combined channel contains a list of all connections (without duplicates) and re-directs ``channel.join`` and ``channel.leave`` calls to all its child channels."
msgstr ""

#: ../../source/api/channels.rst:225
msgid "app.channels"
msgstr ""

#: ../../source/api/channels.rst:227
msgid "``app.channels -> [string]`` returns a list of all existing channel names."
msgstr ""

#: ../../source/api/channels.rst:239
msgid "This is useful to e.g. remove a connection from all channels:"
msgstr ""

#: ../../source/api/channels.rst:251
msgid "channel.join(connection)"
msgstr ""

#: ../../source/api/channels.rst:253
msgid "``channel.join(connection) -> Channel`` adds a connection to this channel. If the channel is a combined channel, add the connection to all its child channels. If the connection is already in the channel it does nothing. Returns the channel object."
msgstr ""

#: ../../source/api/channels.rst:271
msgid "channel.leave(connection|fn)"
msgstr ""

#: ../../source/api/channels.rst:273
msgid "``channel.leave(connection|fn) -> Channel`` removes a connection from this channel. If the channel is a combined channel, remove the connection from all its child channels. Also allows to pass a callback that is run for every connection and returns if the connection should be removed or not. Returns the channel object."
msgstr ""

#: ../../source/api/channels.rst:287
msgid "channel.filter(fn)"
msgstr ""

#: ../../source/api/channels.rst:289
msgid "``channel.filter(fn) -> Channel`` returns a new channel filtered by a given function which gets passed the connection."
msgstr ""

#: ../../source/api/channels.rst:299
msgid "channel.send(data)"
msgstr ""

#: ../../source/api/channels.rst:301
msgid "``channel.send(data) -> Channel`` returns a copy of this channel with customized data that should be sent for this event. Usually this should be handled by modifying either the service method result or setting client “safe” data in ``context.dispatch`` but in some cases it might make sense to still change the event data for certain channels."
msgstr ""

#: ../../source/api/channels.rst:307
msgid "What data will be sent as the event data will be determined by the first available in the following order:"
msgstr ""

#: ../../source/api/channels.rst:310
msgid "``data`` from ``channel.send(data)``"
msgstr ""

#: ../../source/api/channels.rst:311
msgid "``context.dispatch``"
msgstr ""

#: ../../source/api/channels.rst:312
msgid "``context.result``"
msgstr ""

#: ../../source/api/channels.rst:332
msgid "If a connection is in multiple channels (e.g. ``users`` and ``admins``) it will get the data from the *first* channel that it is in."
msgstr ""

#: ../../source/api/channels.rst:337
msgid "channel.connections"
msgstr ""

#: ../../source/api/channels.rst:339
msgid "``channel.connections -> [ object ]`` contains a list of all connections in this channel."
msgstr ""

#: ../../source/api/channels.rst:343
msgid "channel.length"
msgstr ""

#: ../../source/api/channels.rst:345
msgid "``channel.length -> integer`` returns the total number of connections in this channel."
msgstr ""

#: ../../source/api/channels.rst:351
msgid "Publishing"
msgstr ""

#: ../../source/api/channels.rst:353
msgid "Publishers are callback functions that return which channel(s) to send an event to. They can be registered at the application and the service level and for all or specific events. A publishing function gets the event data and context object (``(data, context) => {}``) and returns a named or combined channel, an array of channels or ``null``. Only one publisher can be registered for one type. Besides the standard :ref:`events_service-events` an event name can also be a :ref:`events_custom-events`. ``context`` is the :doc:`./hooks` from the service call or an object containing ``{ path, service, app, result }`` for custom events."
msgstr ""

#: ../../source/api/channels.rst:365
msgid "service.publish([event,] fn)"
msgstr ""

#: ../../source/api/channels.rst:367
msgid "``service.publish([event,] fn) -> service`` registers a publishing function for a specific service for a specific event or all events if no event name was given."
msgstr ""

#: ../../source/api/channels.rst:400
msgid "app.publish([event,] fn)"
msgstr ""

#: ../../source/api/channels.rst:402
msgid "``app.publish([event,] fn) -> app`` registers a publishing function for all services for a specific event or all events if no event name was given."
msgstr ""

#: ../../source/api/channels.rst:427
msgid "Publisher precedence"
msgstr ""

#: ../../source/api/channels.rst:429
msgid "The first publisher callback found in the following order will be used:"
msgstr ""

#: ../../source/api/channels.rst:431
msgid "Service publisher for a specific event"
msgstr ""

#: ../../source/api/channels.rst:432
msgid "Service publisher for all events"
msgstr ""

#: ../../source/api/channels.rst:433
msgid "App publishers for a specific event"
msgstr ""

#: ../../source/api/channels.rst:434
msgid "App publishers for all events"
msgstr ""

#: ../../source/api/channels.rst:437
msgid "Keeping channels updated"
msgstr ""

#: ../../source/api/channels.rst:439
msgid "Since every application will be different, keeping the connections assigned to channels up to date (e.g. if a user joins/leaves a room) is up to you."
msgstr ""

#: ../../source/api/channels.rst:443
msgid "In general, channels should reflect your persistent application data. This means that it normally isn’t necessary for e.g. a user to request to directly join a channel. This is especially important when running multiple instances of an application since channels are only *local* to the current instance."
msgstr ""

#: ../../source/api/channels.rst:449
msgid "Instead, the relevant information (e.g. what rooms a user is currently in) should be stored in the database and then the active connections can be re-distributed into the appropriate channels listening to the proper :doc:`./events`."
msgstr ""

#: ../../source/api/channels.rst:454
msgid "The following example updates all active connections for a given user when the user object (which is assumed to have a ``rooms`` array being a list of room ids the user has joined) is updated or removed:"
msgstr ""

#: ../../source/api/channels.rst:506
msgid "The number active connections is usually one (or none) but unless you prevent it explicitly Feathers is not preventing multiple logins of the same user (e.g. with two open browser windows or on a mobile device)."
msgstr ""

