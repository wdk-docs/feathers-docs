# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-21 10:40+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/api/configuration.rst:2
msgid "Configuration"
msgstr ""

#: ../../source/api/configuration.rst:4
msgid "|npm version| |Changelog|"
msgstr ""

#: ../../source/api/configuration.rst:10
msgid "``@feathersjs/configuration`` is a wrapper for `node-config <https://github.com/lorenwest/node-config>`_ which allows to configure a server side Feathers application."
msgstr ""

#: ../../source/api/configuration.rst:14
msgid "By default this implementation will look in ``config/*`` for ``default.json`` which retains convention. As per the `config docs <https://github.com/lorenwest/node-config/wiki/Configuration-Files>`_ you can organize *“hierarchical configurations for your app deployments”*. See the usage section below for better information how to implement this."
msgstr ""

#: ../../source/api/configuration.rst:22
msgid "Usage"
msgstr ""

#: ../../source/api/configuration.rst:24
msgid "The ``@feathersjs/configuration`` module is an app configuration function that takes a root directory (usually something like ``_dirname`` in your application) and the configuration folder (set to ``config`` by default):"
msgstr ""

#: ../../source/api/configuration.rst:38
msgid "Changing the location of the configuration directory"
msgstr ""

#: ../../source/api/configuration.rst:40
msgid "By default, Feathers will use the ``config/`` directory in the root of your project’s source directory. To change this, e.g., if you have Feathers installed under the ``server/`` directory and you want your configuration at ``server/config/``, you have to set the ``NODE_CONFIG_DIR`` environment variable in ``app.js`` *before* importing ``@feathersjs/configuration``:"
msgstr ""

#: ../../source/api/configuration.rst:47
msgid "e.g., In ``server/app.js``:"
msgstr ""

#: ../../source/api/configuration.rst:54
msgid "The above code is portable, so you can keep your ``config/`` directory with the rest of your Feathers files. It will work, for example, even if you change the directory from ``server/`` to ``amazing-server``, etc."
msgstr ""

#: ../../source/api/configuration.rst:58
msgid "(The NODE_CONFIG_DIR environment variable isn’t used directly by @feathersjs/configuration but by the `node-config <https://github.com/lorenwest/node-config>`_ module that it uses. For more information on configuring node-config settings, see the `Configuration Files Wiki page <https://github.com/lorenwest/node-config/wiki/Configuration-Files>`_."
msgstr ""

#: ../../source/api/configuration.rst:66
msgid "Variable types"
msgstr ""

#: ../../source/api/configuration.rst:68
msgid "``@feathersjs/configuration`` uses the following variable mechanisms:"
msgstr ""

#: ../../source/api/configuration.rst:70
msgid "Given a root and configuration path load a ``default.json`` in that path"
msgstr ""

#: ../../source/api/configuration.rst:72
msgid "Also try to load ``<NODE_ENV>.json`` in that path, and if found, extend the default configuration"
msgstr ""

#: ../../source/api/configuration.rst:74
msgid "Go through each configuration value and sets it on the application (via ``app.set(name, value)``)."
msgstr ""

#: ../../source/api/configuration.rst:77
msgid "If the value is a valid environment variable (e.v. ``NODE_ENV``), use its value instead"
msgstr ""

#: ../../source/api/configuration.rst:79
msgid "If the value starts with ``./`` or ``../`` turn it into an absolute path relative to the configuration file path"
msgstr ""

#: ../../source/api/configuration.rst:81
msgid "If the value is escaped (starting with a ``\\``) always use that value (e.g. ``\\\\NODE_ENV`` will become ``NODE_ENV``)"
msgstr ""

#: ../../source/api/configuration.rst:84
msgid "Both ``default`` and ``<env>`` configurations can be modules which provide their computed settings with ``module.exports = {...}`` and a ``.js`` file suffix. See ``test/config/testing.js`` for an example. All rules listed above apply for ``.js`` modules."
msgstr ""

#: ../../source/api/configuration.rst:90
msgid "Example"
msgstr ""

#: ../../source/api/configuration.rst:92
msgid "In ``config/default.json`` we want to use the local development environment and default MongoDB connection string:"
msgstr ""

#: ../../source/api/configuration.rst:105
msgid "In ``config/production.json`` we are going to use environment variables (e.g. set by Heroku) and use ``public/dist`` to load the frontend production build:"
msgstr ""

#: ../../source/api/configuration.rst:118
msgid "Now it can be used in our ``app.js`` like this:"
msgstr ""

#: ../../source/api/configuration.rst:137
msgid "If you now run"
msgstr ""

#: ../../source/api/configuration.rst:148
msgid "Or via custom environment variables by setting them in ``config/custom-environment-variables.json``:"
msgstr ""

#: ../../source/api/configuration.rst:167
msgid "You can also override these variables with arguments. Read more about how with `node-config <https://github.com/lorenwest/node-config>`_"
msgstr ""

