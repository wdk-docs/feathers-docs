# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-25 16:01+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/api/hooks.rst:2
msgid "Hooks"
msgstr ""

#: ../../source/api/hooks.rst:4
msgid "Hooks are pluggable middleware functions that can be registered **before**, **after** or on \\__error__s of a :doc:`./services`. You can register a single hook function or create a chain of them to create complex work-flows. Most of the time multiple hooks are registered so the examples show the “hook chain” array style registration."
msgstr ""

#: ../../source/api/hooks.rst:10
msgid "A hook is **transport independent**, which means it does not matter if it has been called through HTTP(S) (REST), Socket.io, Primus or any other transport Feathers may support in the future. They are also service agnostic, meaning they can be used with ​\\ **any**\\ ​ service regardless of whether they have a model or not."
msgstr ""

#: ../../source/api/hooks.rst:16
msgid "Hooks are commonly used to handle things like validation, logging, populating related entities, sending notifications and more. This pattern keeps your application logic flexible, composable, and much easier to trace through and debug. For more information about the design patterns behind hooks see `this blog post <https://blog.feathersjs.com/api-service-composition-with-hooks-47af13aa6c01>`_."
msgstr ""

#: ../../source/api/hooks.rst:23
msgid "Quick Example"
msgstr ""

#: ../../source/api/hooks.rst:25
msgid "The following example adds a ``createdAt`` and ``updatedAt`` property before saving the data to the database and logs any errors on the service:"
msgstr ""

#: ../../source/api/hooks.rst:56
msgid "Hook functions"
msgstr ""

#: ../../source/api/hooks.rst:58
msgid "A hook function can be a normal or ``async`` function or arrow function that takes the `hook context <#hook-context>`_ as the parameter and can"
msgstr ""

#: ../../source/api/hooks.rst:61
msgid "return a ``context`` object"
msgstr ""

#: ../../source/api/hooks.rst:62
msgid "return nothing (``undefined``)"
msgstr ""

#: ../../source/api/hooks.rst:63
msgid "return ``feathers.SKIP`` to skip all further hooks"
msgstr ""

#: ../../source/api/hooks.rst:64
msgid "``throw`` an error"
msgstr ""

#: ../../source/api/hooks.rst:65
msgid "for asynchronous operations return a `Promise <https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_ that"
msgstr ""

#: ../../source/api/hooks.rst:69
msgid "resolves with a ``context`` object"
msgstr ""

#: ../../source/api/hooks.rst:70
msgid "resolves with ``undefined``"
msgstr ""

#: ../../source/api/hooks.rst:71
msgid "rejects with an error"
msgstr ""

#: ../../source/api/hooks.rst:73
msgid "For more information see the `hook flow <#hook-flow>`_ and `asynchronous hooks <#asynchronous-hooks>`_ section."
msgstr ""

#: ../../source/api/hooks.rst:116
msgid "Hook context"
msgstr ""

#: ../../source/api/hooks.rst:118
msgid "The hook ``context`` is passed to a hook function and contains information about the service method call. It has **read only** properties that should not be modified and **writeable** properties that can be changed for subsequent hooks."
msgstr ""

#: ../../source/api/hooks.rst:123
msgid "The ``context`` object is the same throughout a service method call so it is possible to add properties and use them in other hooks at a later time."
msgstr ""

#: ../../source/api/hooks.rst:128
msgid "context.app"
msgstr ""

#: ../../source/api/hooks.rst:130
msgid ":doc:`./application`. This can be used to retrieve other services (via ``context.app.service('name')``) or configuration values."
msgstr ""

#: ../../source/api/hooks.rst:135
msgid "context.service"
msgstr ""

#: ../../source/api/hooks.rst:137
msgid "``context.service`` is a *read only* property and contains the service this hook currently runs on."
msgstr ""

#: ../../source/api/hooks.rst:141
msgid "context.path"
msgstr ""

#: ../../source/api/hooks.rst:143
msgid "``context.path`` is a *read only* property and contains the service name (or path) without leading or trailing slashes."
msgstr ""

#: ../../source/api/hooks.rst:147
msgid "context.method"
msgstr ""

#: ../../source/api/hooks.rst:149
msgid "``context.method`` is a *read only* property with the name of the :doc:`./services` (one of ``find``, ``get``, ``create``, ``update``, ``patch``, ``remove``)."
msgstr ""

#: ../../source/api/hooks.rst:154
msgid "context.type"
msgstr ""

#: ../../source/api/hooks.rst:156
msgid "``context.type`` is a *read only* property with the hook type (one of ``before``, ``after`` or ``error``)."
msgstr ""

#: ../../source/api/hooks.rst:160
msgid "context.params"
msgstr ""

#: ../../source/api/hooks.rst:162
msgid "``context.params`` is a **writeable** property that contains the :doc:`./services` parameters (including ``params.query``). For more information see the :ref:`services_params`."
msgstr ""

#: ../../source/api/hooks.rst:167
msgid "context.id"
msgstr ""

#: ../../source/api/hooks.rst:169
msgid "``context.id`` is a **writeable** property and the ``id`` for a ``get``, ``remove``, ``update`` and ``patch`` service method call. For ``remove``, ``update`` and ``patch`` ``context.id`` can also be ``null`` when modifying multiple entries. In all other cases it will be ``undefined``."
msgstr ""

#: ../../source/api/hooks.rst:175
msgid "``context.id`` is only available for method types ``get``, ``remove``, ``update`` and ``patch``."
msgstr ""

#: ../../source/api/hooks.rst:179
msgid "context.data"
msgstr ""

#: ../../source/api/hooks.rst:181
msgid "``context.data`` is a **writeable** property containing the data of a ``create``, ``update`` and ``patch`` service method call."
msgstr ""

#: ../../source/api/hooks.rst:184
msgid "``context.data`` will only be available for method types ``create``, ``update`` and ``patch``."
msgstr ""

#: ../../source/api/hooks.rst:188
msgid "context.error"
msgstr ""

#: ../../source/api/hooks.rst:190
msgid "``context.error`` is a **writeable** property with the error object that was thrown in a failed method call. It is only available in ``error`` hooks."
msgstr ""

#: ../../source/api/hooks.rst:194
msgid "``context.error`` will only be available if ``context.type`` is ``error``."
msgstr ""

#: ../../source/api/hooks.rst:198
msgid "context.result"
msgstr ""

#: ../../source/api/hooks.rst:200
msgid "``context.result`` is a **writeable** property containing the result of the successful service method call. It is only available in ``after`` hooks. ``context.result`` can also be set in"
msgstr ""

#: ../../source/api/hooks.rst:204
msgid "A ``before`` hook to skip the actual service method (database) call"
msgstr ""

#: ../../source/api/hooks.rst:205
msgid "An ``error`` hook to swallow the error and return a result instead"
msgstr ""

#: ../../source/api/hooks.rst:209
msgid "``context.result`` will only be available if ``context.type`` is ``after`` or if ``context.result`` has been set."
msgstr ""

#: ../../source/api/hooks.rst:213
msgid "context.dispatch"
msgstr ""

#: ../../source/api/hooks.rst:215
msgid "``context.dispatch`` is a **writeable, optional** property and contains a “safe” version of the data that should be sent to any client. If ``context.dispatch`` has not been set ``context.result`` will be sent to the client instead."
msgstr ""

#: ../../source/api/hooks.rst:220
msgid "``context.dispatch`` only affects the data sent through a Feathers Transport like `REST <./express>`_ or :doc:`./socketio`. An internal method call will still get the data set in ``context.result``."
msgstr ""

#: ../../source/api/hooks.rst:226
msgid "context.statusCode"
msgstr ""

#: ../../source/api/hooks.rst:228
msgid "``context.statusCode`` is a **writeable, optional** property that allows to override the standard `HTTP status code <https://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html>`_ that should be returned."
msgstr ""

#: ../../source/api/hooks.rst:234
msgid "Hook flow"
msgstr ""

#: ../../source/api/hooks.rst:236
msgid "In general, hooks are executed in the order they are registered with the original service method being called after all ``before`` hooks. This flow can be affected as follows."
msgstr ""

#: ../../source/api/hooks.rst:241
msgid "Throwing an error"
msgstr ""

#: ../../source/api/hooks.rst:243
msgid "When an error is thrown (or the promise is rejected), all subsequent hooks - and the service method call if it didn’t run already - will be skipped and only the error hooks will run."
msgstr ""

#: ../../source/api/hooks.rst:247
msgid "The following example throws an error when the text for creating a new message is empty. You can also create very similar hooks to use your Node validation library of choice."
msgstr ""

#: ../../source/api/hooks.rst:266
msgid "Setting ``context.result``"
msgstr ""

#: ../../source/api/hooks.rst:268
msgid "When ``context.result`` is set in a ``before`` hook, the original :doc:`./services` call will be skipped. All other hooks will still execute in their normal order. The following example always returns the currently `authenticated user <./authentication/server.md>`_ instead of the actual user for all ``get`` method calls:"
msgstr ""

#: ../../source/api/hooks.rst:290
msgid "Returning ``feathers.SKIP``"
msgstr ""

#: ../../source/api/hooks.rst:292
msgid "``require('@feathersjs/feathers').SKIP`` can be returned from a hook to indicate that all following hooks should be skipped. If returned by a **before** hook, the remaining **before** hooks are skipped; any **after** hooks will still be run. If it hasn’t run yet, the service method will still be called unless ``context.result`` is set already."
msgstr ""

#: ../../source/api/hooks.rst:299
msgid "Asynchronous hooks"
msgstr ""

#: ../../source/api/hooks.rst:301
msgid "When the hook function is ``async`` or a Promise is returned it will wait until all asynchronous operations resolve or reject before continuing to the next hook."
msgstr ""

#: ../../source/api/hooks.rst:305
msgid "As stated in the `hook functions <#hook-functions>`_ section the promise has to either resolve with the ``context`` object (usually done with ``.then(() => context)`` at the end of the promise chain) or with ``undefined``."
msgstr ""

#: ../../source/api/hooks.rst:311
msgid "async/await"
msgstr ""

#: ../../source/api/hooks.rst:313
msgid "When using Node v8.0.0 or later the use of `async/await <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function>`_ is highly recommended. This will avoid many common issues when using Promises and asynchronous hook flows. Any hook function can be ``async`` in which case it will wait until all ``await`` operations are completed. Just like a normal hook it should return the ``context`` object or ``undefined``."
msgstr ""

#: ../../source/api/hooks.rst:321
msgid "The following example shows an async/await hook that uses another service to retrieve and populate the messages ``user`` when getting a single message:"
msgstr ""

#: ../../source/api/hooks.rst:347
msgid "Returning promises"
msgstr ""

#: ../../source/api/hooks.rst:349
msgid "The following example shows an asynchronous hook that uses another service to retrieve and populate the messages ``user`` when getting a single message."
msgstr ""

#: ../../source/api/hooks.rst:376
msgid "A common issue when hooks are not running in the expected order is a missing ``return`` statement of a promise at the top level of the hook function."
msgstr ""

#: ../../source/api/hooks.rst:380
msgid "Most Feathers service calls and newer Node packages already return Promises. They can be returned and chained directly. There is no need to instantiate your own ``new`` Promise instance in those cases."
msgstr ""

#: ../../source/api/hooks.rst:386
msgid "Converting callbacks"
msgstr ""

#: ../../source/api/hooks.rst:388
msgid "When the asynchronous operation is using a *callback* instead of returning a promise you have to create and return a new Promise (``new Promise((resolve, reject) => {})``) or use `util.promisify <https://nodejs.org/api/util.html#util_util_promisify_original>`_."
msgstr ""

#: ../../source/api/hooks.rst:393
msgid "The following example reads a JSON file converting `fs.readFile <https://nodejs.org/api/fs.html#fs_fs_readfile_file_options_callback>`_ with ``util.promisify``:"
msgstr ""

#: ../../source/api/hooks.rst:419
msgid "Other tools like `Bluebird <https://github.com/petkaantonov/bluebird>`_ also help converting between callbacks and promises."
msgstr ""

#: ../../source/api/hooks.rst:424
msgid "Registering hooks"
msgstr ""

#: ../../source/api/hooks.rst:426
msgid "Hook functions are registered on a service through the ``app.service(<servicename>).hooks(hooks)`` method. There are several options for what can be passed as ``hooks``:"
msgstr ""

#: ../../source/api/hooks.rst:486
msgid "When using the full object, ``all`` is a special keyword meaning this hook will run for all methods. ``all`` hooks will be registered before other method specific hooks."
msgstr ""

#: ../../source/api/hooks.rst:490
msgid "``app.service(<servicename>).hooks(hooks)`` can be called multiple times and the hooks will be registered in that order. Normally all hooks should be registered at once however to see at a glance what the service is going to do."
msgstr ""

#: ../../source/api/hooks.rst:498
msgid "Application hooks"
msgstr ""

#: ../../source/api/hooks.rst:500
msgid "To add hooks to every service ``app.hooks(hooks)`` can be used. Application hooks are `registered in the same format as service hooks <#registering-hooks>`_ and also work exactly the same."
msgstr ""

#: ../../source/api/hooks.rst:504
msgid "when application hooks will be executed however:"
msgstr ""

#: ../../source/api/hooks.rst:506
msgid "``before`` application hooks will always run *before* all service ``before`` hooks"
msgstr ""

#: ../../source/api/hooks.rst:507
msgid "``after`` application hooks will always run *after* all service ``after`` hooks"
msgstr ""

#: ../../source/api/hooks.rst:508
msgid "``error`` application hooks will always run *after* all service ``error`` hooks"
msgstr ""

#: ../../source/api/hooks.rst:510
msgid "Here is an example for a very useful application hook that logs every service method error with the service and method name as well as the error stack."
msgstr ""

