# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-25 14:02+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/api/services.rst:2
msgid "Services"
msgstr ""

#: ../../source/api/services.rst:4
msgid "“Services” are the heart of every Feathers application. Services are JavaScript objects (or instances of `ES6 classes <https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes>`_) that implement :ref:`services_service-methods`. Feathers itself will also add some :ref:`services_feathers-functionality` to its services."
msgstr ""

#: ../../source/api/services.rst:12
msgid "Service methods"
msgstr ""

#: ../../source/api/services.rst:14
msgid "Service methods are pre-defined `CRUD <https://en.wikipedia.org/wiki/Create,_read,_update_and_delete>`_ methods that your service object can implement (or that have already been implemented by one of the :doc:`./databases/common`.. Below is a complete example of the Feathers *service interface* as a normal JavaScript object either returning a `Promise <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_ or using `async/await <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function>`_:"
msgstr ""

#: ../../source/api/services.rst:54
msgid "Services can also be an instance of an `ES6 class <https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Classes>`_:"
msgstr ""

#: ../../source/api/services.rst:85
msgid "Methods are optional, and if a method is not implemented Feathers will automatically emit a ``NotImplemented`` error."
msgstr ""

#: ../../source/api/services.rst:91
msgid "Always use the service returned by ``app.service(path)`` not the service object (the ``myService`` object above) directly. See the `app.service documentation <./application.md#servicepath>`_ for more information."
msgstr ""

#: ../../source/api/services.rst:95
msgid "Service methods must return a `Promise <https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise>`_ or be declared as ``async`` and have the following parameters:"
msgstr ""

#: ../../source/api/services.rst:98
msgid "``id`` — The identifier for the resource. A resource is the data identified by a unique id."
msgstr ""

#: ../../source/api/services.rst:99
msgid "``data`` — The resource data."
msgstr ""

#: ../../source/api/services.rst:100
msgid "``params`` - Additional parameters for the method call, see :ref:`services_params`"
msgstr ""

#: ../../source/api/services.rst:102
msgid "Once registered, the service can be retrieved and used via :ref:`api_application_servicepath`."
msgstr ""

#: ../../source/api/services.rst:111
msgid "Keep in mind that services don’t have to use databases. You could easily replace the database in the example with a package that uses some API to, for example, pull in GitHub stars or stock ticker data."
msgstr ""

#: ../../source/api/services.rst:115
msgid "This section describes the general usage of service methods and how to implement them. They are already implemented by the official Feathers database adapters. For specifics on how to use the database adapters, see the :doc:`./databases/common`."
msgstr ""

#: ../../source/api/services.rst:123
msgid "params"
msgstr ""

#: ../../source/api/services.rst:125
msgid "``params`` contain additional information for the service method call. Some properties in ``params`` can be set by Feathers already. Commonly used are:"
msgstr ""

#: ../../source/api/services.rst:129
msgid "``params.query`` - the query parameters from the client, either passed as URL query parameters (see the :doc:`./express` chapter) or through websockets (see :doc:`./socketio` or :doc:`./primus`)."
msgstr ""

#: ../../source/api/services.rst:133
msgid "``params.provider`` - The transport (``rest``, ``socketio`` or ``primus``) used for this service call. Will be ``undefined`` for internal calls from the server (unless passed explicitly)."
msgstr ""

#: ../../source/api/services.rst:136
msgid ":doc:`./authentication/server` or passed explicitly."
msgstr ""

#: ../../source/api/services.rst:137
msgid "``params.connection`` - If the service call has been made by a real-time transport (e.g. through websockets), ``params.connection`` is the connection object that can be used with :doc:`./channels`."
msgstr ""

#: ../../source/api/services.rst:144
msgid "For external calls only ``params.query`` will be sent between the client and server. If not passed, ``params.query`` will be ``undefined`` for internal calls."
msgstr ""

#: ../../source/api/services.rst:149
msgid ".find(params)"
msgstr ""

#: ../../source/api/services.rst:151
msgid "``service.find(params) -> Promise`` - Retrieves a list of all resources from the service. Provider parameters will be passed as ``params.query``."
msgstr ""

#: ../../source/api/services.rst:173
msgid "``find`` does not have to return an array; it can also return an object. The database adapters already do this for :ref:`api_databases_common_pagination`."
msgstr ""

#: ../../source/api/services.rst:178
msgid ".get(id, params)"
msgstr ""

#: ../../source/api/services.rst:180
msgid "``service.get(id, params) -> Promise`` - Retrieves a single resource with the given ``id`` from the service."
msgstr ""

#: ../../source/api/services.rst:195
msgid ".create(data, params)"
msgstr ""

#: ../../source/api/services.rst:197
msgid "``service.create(data, params) -> Promise`` - Creates a new resource with ``data``. The method should return a ``Promise`` with the newly created data. ``data`` may also be an array."
msgstr ""

#: ../../source/api/services.rst:215
msgid "A successful ``create`` method call emits the :ref:`api_events_created`."
msgstr ""

#: ../../source/api/services.rst:218
msgid ".update(id, data, params)"
msgstr ""

#: ../../source/api/services.rst:220
msgid "``service.update(id, data, params) -> Promise`` - Replaces the resource identified by ``id`` with ``data``. The method should return a ``Promise`` with the complete, updated resource data. ``id`` can also be ``null`` when updating multiple records, with ``params.query`` containing the query criteria."
msgstr ""

#: ../../source/api/services.rst:226
msgid "A successful ``update`` method call emits the :ref:`events_updated`."
msgstr ""

#: ../../source/api/services.rst:230
msgid ".patch(id, data, params)"
msgstr ""

#: ../../source/api/services.rst:232
msgid "``patch(id, data, params) -> Promise`` - Merges the existing data of the resource identified by ``id`` with the new ``data``. ``id`` can also be ``null`` indicating that multiple resources should be patched with ``params.query`` containing the query criteria."
msgstr ""

#: ../../source/api/services.rst:237
msgid "The method should return with the complete, updated resource data. Implement ``patch`` additionally (or instead of) ``update`` if you want to distinguish between partial and full updates and support the ``PATCH`` HTTP method."
msgstr ""

#: ../../source/api/services.rst:242
msgid "A successful ``patch`` method call emits the :ref:`events_patched`."
msgstr ""

#: ../../source/api/services.rst:246
msgid ".remove(id, params)"
msgstr ""

#: ../../source/api/services.rst:248
msgid "``service.remove(id, params) -> Promise`` - Removes the resource with ``id``. The method should return a ``Promise`` with the removed resource. ``id`` can also be ``null``, which indicates the deletion of multiple resources, with ``params.query`` containing the query criteria."
msgstr ""

#: ../../source/api/services.rst:253
msgid "A successful ``remove`` method call emits the :ref:`events_remove`."
msgstr ""

#: ../../source/api/services.rst:257
msgid ".setup(app, path)"
msgstr ""

#: ../../source/api/services.rst:259
msgid "``service.setup(app, path) -> Promise`` is a special method that initializes the service, passing an instance of the Feathers application and the path it has been registered on."
msgstr ""

#: ../../source/api/services.rst:263
msgid "For services registered before ``app.listen`` is invoked, the ``setup`` function of each registered service is called on invoking ``app.listen``. For services registered after ``app.listen`` is invoked, ``setup`` is called automatically by Feathers when a service is registered."
msgstr ""

#: ../../source/api/services.rst:269
msgid "``setup`` is a great place to initialize your service with any special configuration or if connecting services that are very tightly coupled (see below), as opposed to using :doc:`hooks/readme`."
msgstr ""

#: ../../source/api/services.rst:317
msgid "Feathers functionality"
msgstr ""

#: ../../source/api/services.rst:319
msgid "When registering a service, Feathers (or its plugins) can also add its own methods to a service. Most notably, every service will automatically become an instance of a `NodeJS EventEmitter <https://nodejs.org/api/events.html#events_class_eventemitter>`_."
msgstr ""

#: ../../source/api/services.rst:325
msgid ".hooks(hooks)"
msgstr ""

#: ../../source/api/services.rst:327
msgid "Register :doc:`./hooks` for this service."
msgstr ""

#: ../../source/api/services.rst:330
msgid ".publish([event, ] publisher)"
msgstr ""

#: ../../source/api/services.rst:332
msgid "Register an event publishing callback. For more information, see the :doc:`./channels`."
msgstr ""

#: ../../source/api/services.rst:336
msgid ".mixin(mixin)"
msgstr ""

#: ../../source/api/services.rst:338
msgid "``service.mixin(mixin) -> service`` extends the functionality of a service. For more information see the `Uberproto <https://github.com/daffl/uberproto>`_ project page."
msgstr ""

#: ../../source/api/services.rst:343
msgid ".on(eventname, listener)"
msgstr ""

#: ../../source/api/services.rst:345
msgid "Provided by the core `NodeJS EventEmitter .on <https://nodejs.org/api/events.html#events_emitter_on_eventname_listener>`_. Registers a ``listener`` method (``function(data) {}``) for the given ``eventname``."
msgstr ""

#: ../../source/api/services.rst:350
#: ../../source/api/services.rst:360
#: ../../source/api/services.rst:370
msgid "For more information about service events, see the :doc:`./events`."
msgstr ""

#: ../../source/api/services.rst:354
msgid ".emit(eventname, data)"
msgstr ""

#: ../../source/api/services.rst:356
msgid "Provided by the core `NodeJS EventEmitter .emit <https://nodejs.org/api/events.html#events_emitter_emit_eventname_args>`_. Emits the event ``eventname`` to all event listeners."
msgstr ""

#: ../../source/api/services.rst:364
msgid ".removeListener(eventname, [ listener ])"
msgstr ""

#: ../../source/api/services.rst:366
msgid "Provided by the core `NodeJS EventEmitter .removeListener <https://nodejs.org/api/events.html#events_emitter_removelistener_eventname_listener>`_. Removes all listeners, or the given listener, for ``eventname``."
msgstr ""

