# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-25 16:01+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/api/express.rst:2
msgid "Express"
msgstr ""

#: ../../source/api/express.rst:4
msgid "|npm version| |Changelog|"
msgstr ""

#: ../../source/api/express.rst:10
msgid "The ``@feathersjs/express`` module contains `Express <http://expressjs.com/>`_ framework integrations for Feathers:"
msgstr ""

#: ../../source/api/express.rst:13
msgid "The `Express framework bindings <#expressapp>`_ to make a Feathers application Express compatible"
msgstr ""

#: ../../source/api/express.rst:15
msgid "An Express based transport to expose services through a :ref:`api_express_rest`"
msgstr ""

#: ../../source/api/express.rst:16
msgid "An :doc:`./errors`"
msgstr ""

#: ../../source/api/express.rst:24
msgid "This page describes how to set up an Express server and REST API. See the :doc:`./client/rest` how to use this server on the client."
msgstr ""

#: ../../source/api/express.rst:27
msgid "This chapter assumes that you are familiar with `Express <http://expressjs.com/en/guide/routing.html>`_."
msgstr ""

#: ../../source/api/express.rst:31
msgid "express(app)"
msgstr ""

#: ../../source/api/express.rst:33
msgid ":doc:`./application` into a fully Express (4+) compatible application that additionally to Feathers functionality also lets you use the `Express API <http://expressjs.com/en/4x/api.html>`_."
msgstr ""

#: ../../source/api/express.rst:45
msgid "``@feathersjs/express`` (``express``) also exposes the standard `Express middleware <http://expressjs.com/en/4x/api.html#express>`_:"
msgstr ""

#: ../../source/api/express.rst:48
msgid "``express.json`` - A JSON body parser"
msgstr ""

#: ../../source/api/express.rst:49
msgid "``express.urlencoded`` - A URL encoded form body parser"
msgstr ""

#: ../../source/api/express.rst:50
msgid "``express.static`` - To statically host files in a folder"
msgstr ""

#: ../../source/api/express.rst:51
msgid "``express.Router`` - Creates an Express router object"
msgstr ""

#: ../../source/api/express.rst:56
msgid "express()"
msgstr ""

#: ../../source/api/express.rst:58
msgid "If no Feathers application is passed, ``express() -> app`` returns a plain Express application just like a normal call to Express would."
msgstr ""

#: ../../source/api/express.rst:62
msgid "app.use(path, service|mw|[mw])"
msgstr ""

#: ../../source/api/express.rst:64
msgid ":doc:`./services`. an `Express middleware <http://expressjs.com/en/guide/writing-middleware.html>`_ or an array of `Express middleware <http://expressjs.com/en/guide/writing-middleware.html>`_ on the given path. If :doc:`./services` is passed it will use Feathers registration mechanism, for a middleware function Express."
msgstr ""

#: ../../source/api/express.rst:98
msgid "app.listen(port)"
msgstr ""

#: ../../source/api/express.rst:100
msgid "``app.listen(port) -> HttpServer`` will first call Express `app.listen <http://expressjs.com/en/4x/api.html#app.listen>`_ and then internally also call the :ref:`application_setupserver`."
msgstr ""

#: ../../source/api/express.rst:112
msgid "app.setup(server)"
msgstr ""

#: ../../source/api/express.rst:114
msgid "``app.setup(server) -> app`` is usually called internally by ``app.listen`` but in the cases described below needs to be called explicitly."
msgstr ""

#: ../../source/api/express.rst:119
msgid "Sub-Apps"
msgstr ""

#: ../../source/api/express.rst:121
msgid "When registering an application as a sub-app, ``app.setup(server)`` has to be called to initialize the sub-apps services."
msgstr ""

#: ../../source/api/express.rst:142
msgid "We recommend avoiding complex sub-app setups because websockets and Feathers built in authentication are not fully sub-app aware at the moment."
msgstr ""

#: ../../source/api/express.rst:147
msgid "HTTPS"
msgstr ""

#: ../../source/api/express.rst:149
msgid "HTTPS requires creating a separate server in which case ``app.setup(server)`` also has to be called explicitly."
msgstr ""

#: ../../source/api/express.rst:171
msgid "Virtual Hosts"
msgstr ""

#: ../../source/api/express.rst:173
msgid "The `vhost <https://github.com/expressjs/vhost>`_ Express middleware can be used to run a Feathers application on a virtual host but again requires ``app.setup(server)`` to be called explicitly."
msgstr ""

#: ../../source/api/express.rst:198
msgid "express.rest()"
msgstr ""

#: ../../source/api/express.rst:200
msgid "``express.rest`` registers a Feathers transport mechanism that allows you to expose and consume :doc:`./services` through a `RESTful API <https://en.wikipedia.org/wiki/Representational_state_transfer>`_. This means that you can call a service method through the ``GET``, ``POST``, ``PUT``, ``PATCH`` and ``DELETE`` `HTTP methods <https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol>`_:"
msgstr ""

#: ../../source/api/express.rst:209
msgid "Service method"
msgstr ""

#: ../../source/api/express.rst:209
msgid "HTTP method"
msgstr ""

#: ../../source/api/express.rst:209
msgid "Path"
msgstr ""

#: ../../source/api/express.rst:211
msgid ".find()"
msgstr ""

#: ../../source/api/express.rst:211
#: ../../source/api/express.rst:212
msgid "GET"
msgstr ""

#: ../../source/api/express.rst:211
#: ../../source/api/express.rst:213
msgid "/messages"
msgstr ""

#: ../../source/api/express.rst:212
msgid ".get()"
msgstr ""

#: ../../source/api/express.rst:212
#: ../../source/api/express.rst:214
#: ../../source/api/express.rst:215
#: ../../source/api/express.rst:216
msgid "/messages/1"
msgstr ""

#: ../../source/api/express.rst:213
msgid ".create()"
msgstr ""

#: ../../source/api/express.rst:213
msgid "POST"
msgstr ""

#: ../../source/api/express.rst:214
msgid ".update()"
msgstr ""

#: ../../source/api/express.rst:214
msgid "PUT"
msgstr ""

#: ../../source/api/express.rst:215
msgid ".patch()"
msgstr ""

#: ../../source/api/express.rst:215
msgid "PATCH"
msgstr ""

#: ../../source/api/express.rst:216
msgid ".remove()"
msgstr ""

#: ../../source/api/express.rst:216
msgid "DELETE"
msgstr ""

#: ../../source/api/express.rst:219
msgid "To expose services through a RESTful API we will have to configure ``express.rest`` and provide our own body parser middleware (usually the standard `Express 4 body-parser <https://github.com/expressjs/body-parser>`_) to make REST ``.create``, ``.update`` and ``.patch`` calls parse the data in the HTTP body. If you would like to add other middleware *before* the REST handler, call ``app.use(middleware)`` before registering any services."
msgstr ""

#: ../../source/api/express.rst:227
msgid "The body-parser middleware has to be registered *before* any service. Otherwise the service method will throw a ``No data provided`` or ``First parameter for 'create' must be an object`` error."
msgstr ""

#: ../../source/api/express.rst:233
msgid "app.configure(express.rest())"
msgstr ""

#: ../../source/api/express.rst:235
msgid "Configures the transport provider with a standard formatter sending JSON response via `res.json <http://expressjs.com/en/4x/api.html#res.json>`_."
msgstr ""

#: ../../source/api/express.rst:255
msgid "app.configure(express.rest(formatter))"
msgstr ""

#: ../../source/api/express.rst:257
msgid "The default REST response formatter is a middleware that formats the data retrieved by the service as JSON. If you would like to configure your own ``formatter`` middleware pass a ``formatter(req, res)`` function. This middleware will have access to ``res.data`` which is the data returned by the service. `res.format <http://expressjs.com/en/4x/api.html#res.format>`_ can be used for content negotiation."
msgstr ""

#: ../../source/api/express.rst:287
msgid "Custom service middleware"
msgstr ""

#: ../../source/api/express.rst:289
msgid "Custom Express middleware that only should run before or after a specific service can be passed to ``app.use`` in the order it should run:"
msgstr ""

#: ../../source/api/express.rst:306
msgid "Middleware that runs after the service has the service call information available as"
msgstr ""

#: ../../source/api/express.rst:309
msgid "``res.data`` - The data that will be sent"
msgstr ""

#: ../../source/api/express.rst:310
msgid ":doc:`./hooks` context of the service method call"
msgstr ""

#: ../../source/api/express.rst:313
msgid "For example ``updateData`` could look like this:"
msgstr ""

#: ../../source/api/express.rst:324
msgid "If you run ``res.send`` in a custom middleware after the service and don’t call ``next``, other middleware (like the REST formatter) will be skipped. This can be used to e.g. render different views for certain service method calls."
msgstr ""

#: ../../source/api/express.rst:330
msgid "params"
msgstr ""

#: ../../source/api/express.rst:332
msgid "All middleware registered after the :doc:`./rest` will have access to the ``req.feathers`` object to set properties on the service method ``params``:"
msgstr ""

#: ../../source/api/express.rst:366
msgid "You can see the parameters set by running the example and visiting ``http://localhost:3030/todos/test``."
msgstr ""

#: ../../source/api/express.rst:369
msgid "Avoid setting ``req.feathers = something`` directly since it may already contain information that other Feathers plugins rely on. Adding individual properties or using ``Object.assign(req.feathers, something)`` is the more reliable option."
msgstr ""

#: ../../source/api/express.rst:374
msgid "Since the order of Express middleware matters, any middleware that sets service parameters has to be registered *before* your services (in a generated application before ``app.configure(services)`` or in ``middleware/index.js``)."
msgstr ""

#: ../../source/api/express.rst:381
msgid "Although it may be convenient to set ``req.feathers.req = req;`` to have access to the request object in the service, we recommend keeping your services as provider independent as possible. There usually is a way to pre-process your data in a middleware so that the service does not need to know about the HTTP request or response."
msgstr ""

#: ../../source/api/express.rst:389
msgid "params.query"
msgstr ""

#: ../../source/api/express.rst:391
msgid "``params.query`` will contain the URL query parameters sent from the client. For the REST transport the query string is parsed using the `qs <https://github.com/ljharb/qs>`_ module. For some query string examples see the :doc:`./databases/querying` chapter."
msgstr ""

#: ../../source/api/express.rst:397
msgid "Only ``params.query`` is passed between the server and the client, other parts of ``params`` are not. This is for security reasons so that a client can’t set things like ``params.user`` or the database options. You can always map from ``params.query`` to other :doc:`./hooks`."
msgstr ""

#: ../../source/api/express.rst:403
msgid "For example:"
msgstr ""

#: ../../source/api/express.rst:409
msgid "Will set ``params.query`` to"
msgstr ""

#: ../../source/api/express.rst:420
msgid "Since the URL is just a string, there will be **no type conversion**. This can be done manually in a :doc:`./hooks` or with the `query-types <https://github.com/xpepermint/query-types>`_ Express middleware to convert Boolean and Numeric types."
msgstr ""

#: ../../source/api/express.rst:425
msgid "If an array in your request consists of more than 20 items, the `qs <https://www.npmjs.com/package/qs>`_ parser implicitly `converts <https://github.com/ljharb/qs#parsing-arrays>`_ it to an object with indices as keys. To extend this limit, you can set a custom query parser: ``app.set('query parser', str => qs.parse(str, {arrayLimit: 1000}))``"
msgstr ""

#: ../../source/api/express.rst:433
msgid "``params.provider``"
msgstr ""

#: ../../source/api/express.rst:435
msgid "For any :doc:`./services` made through REST :doc:`./hooks` this can for example be used to prevent external users from making a service method call:"
msgstr ""

#: ../../source/api/express.rst:454
msgid "params.route"
msgstr ""

#: ../../source/api/express.rst:456
msgid "See the `routing section <#routing>`_."
msgstr ""

#: ../../source/api/express.rst:459
msgid "express.notFound(options)"
msgstr ""

#: ../../source/api/express.rst:461
msgid "``express.notFound()`` returns middleware that returns a ``NotFound`` (404) :doc:`./errors`. It should be used as the last middleware **before** the error handler. The following options are available:"
msgstr ""

#: ../../source/api/express.rst:466
msgid "``verbose``: Set to ``true`` if the URL should be included in the error message (default: ``false``)"
msgstr ""

#: ../../source/api/express.rst:476
msgid "express.errorHandler()"
msgstr ""

#: ../../source/api/express.rst:478
msgid "``expres.errorHandler`` is an `Express error handler <https://expressjs.com/en/guide/error-handling.html>`_ middleware that formats any error response to a REST call as JSON (or HTML if e.g. someone hits our API directly in the browser) and sets the appropriate error code."
msgstr ""

#: ../../source/api/express.rst:485
msgid "You can still use any other Express compatible `error middleware <http://expressjs.com/en/guide/error-handling.html>`_ with Feathers. In fact, the ``express.errors`` is just a slightly customized one."
msgstr ""

#: ../../source/api/express.rst:490
msgid "Just as in Express, the error handler has to be registered *after* all middleware and services."
msgstr ""

#: ../../source/api/express.rst:493
msgid "``app.use(express.errorHandler())``"
msgstr ""

#: ../../source/api/express.rst:495
msgid "Set up the error handler with the default configuration."
msgstr ""

#: ../../source/api/express.rst:508
msgid "``app.use(express.errorHandler(options))``"
msgstr ""

#: ../../source/api/express.rst:535
msgid "If you want to have the response in json format be sure to set the ``Accept`` header in your request to ``application/json`` otherwise the default error handler will return HTML."
msgstr ""

#: ../../source/api/express.rst:539
msgid "The following options can be passed when creating a new localstorage service:"
msgstr ""

#: ../../source/api/express.rst:542
msgid "``html`` (Function|Object) [optional] - A custom formatter function or an object that contains the path to your custom html error pages."
msgstr ""

#: ../../source/api/express.rst:544
msgid "``logger`` (Function|false) (default: ``console``) - Set a logger object to log the error (it will be logger with ``logger.error(error)``"
msgstr ""

#: ../../source/api/express.rst:550
msgid "``html`` can also be set to ``false`` to disable html error pages altogether so that only JSON is returned."
msgstr ""

#: ../../source/api/express.rst:554
msgid "Routing"
msgstr ""

#: ../../source/api/express.rst:556
msgid "Express route placeholders in a service URL will be added to the services ``params.route``."
msgstr ""

#: ../../source/api/express.rst:560
msgid "See the :ref:`faq_how-do-i-do-nested-or-custom-routes` for more details on when and when not to use nested routes."
msgstr ""

