# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-25 16:01+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:2
msgid "Custom Auth Strategy"
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:4
msgid "The Auk release of FeathersJS includes a powerful new :doc:`../../api/authentication/server` built on top of `PassportJS <http://www.passportjs.org/>`_. The new plugins are very flexible, allowing you to customize nearly everything. We can leverage this to create completely custom authentication strategies using `Passport Custom <https://www.npmjs.com/package/passport-custom>`_. Let’s take a look at two such examples in this guide."
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:12
msgid "Setting up the basic app"
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:14
msgid "Let’s first start by creating a basic server setup."
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:43
msgid "Creating a Custom API Key Auth Strategy"
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:45
msgid "The first custom strategy example we can look at is an API Key Strategy. Within it, we’ll check if there is a specific header in the request containing a specific API key. If true, we’ll successfully authorize the request."
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:50
msgid "First let’s make the strategy using `passport-custom <https://www.npmjs.com/package/passport-custom>`_ npm package."
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:79
msgid "Next let’s add this to our server setup"
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:94
msgid "Next let’s create a custom authentication hook that conditionally applies auth for all external requests."
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:120
#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:230
msgid "Finally our ``server.js`` looks like this:"
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:168
msgid "Now any request with a header ``x-api-key`` and the value ``opensesame`` will be authenticated by the server."
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:172
msgid "Creating an Anonymous User Strategy"
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:174
msgid "The second strategy we’ll look at is for an anonymous user. For this specific flow we’ll expect the client to call the ``/authentication`` endpoint letting us know that it wants to authenticate anonymously. The server will then create a new user and return a new JWT token that the client will have to use from that point onwards."
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:180
msgid "First let’s create the strategy using ``passport-custom``"
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:206
msgid "Next let’s update our ``server.js`` to use this strategy."
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:284
msgid "Now any such request will return a valid JWT token:"
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:294
msgid "this looks very similar to a request body for ``local`` strategy:"
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:306
msgid "So for any new strategy we register, we can call the ``/authentication`` endpoint with a specific body and expect a valid JWT in return, which we can use from thereon."
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:312
msgid "As we can see it’s very easy to create a completely custom auth strategy in a standard passport way using ``passport-custom``."
msgstr ""

#: ../../source/guides/auth/recipe.custom-auth-strategy.rst:315
msgid "Happy Hacking!!"
msgstr ""

