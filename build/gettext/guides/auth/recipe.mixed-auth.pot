# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-25 14:49+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/guides/auth/recipe.mixed-auth.rst:2
msgid "Create Endpoints with Mixed Auth"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:4
msgid "The Auk release of FeathersJS includes a powerful new :doc:`../../api/authentication/server` built on top of `PassportJS <http://www.passportjs.org/>`_. It can be customized to handle almost any app’s authentication requirements. In this guide, we’ll look at how to handle a fairly common auth scenario: Sometimes an endpoint needs to serve different information depending on whether the user is authenticated. An unauthenticated user might only see public records. An authenticated user might be able to see additional records."
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:13
msgid "Setup the Authentication Endpoint"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:15
msgid "To get started, we need a working authentication setup. Below is a default configuration and ``authentication.js``. They contain the same code generated by the `feathers-cli <https://github.com/feathersjs/cli>`_. You can create the below setup using the following terminal commands:"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:21
msgid "``npm install -g @feathersjs/cli``\\"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:22
msgid "``mkdir feathers-demo-local; cd feathers-demo-local``\\  or a folder name you prefer."
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:24
msgid "``feathers generate app``\\  use the default prompts."
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:25
msgid "``feathers generate authentication``"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:27
msgid "Select ``Username + Password (Local)`` when prompted for a provider."
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:29
msgid "Select the defaults for the remaining prompts."
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:31
msgid "**config/default.json:**"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:71
msgid "**src/authentication.js:**"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:102
msgid "Set up a “Mixed Auth” Endpoint"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:104
msgid "Now we need to setup an endpoint to handle both unauthenticated and authenticated users. For this example, we’ll use the ``/users`` service that was already created by the authentication generator. Let’s suppose that our application requires that each ``user`` record will contain a ``public`` boolean property. Each record will look something like this:"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:119
msgid "If a ``user`` record contains ``public: true``, then **unauthenticated** users should be able to access it. Let’s see how to use the ``iff`` and ``else`` conditional hooks from `feathers-hooks-common <https://feathers-plus.github.io/v1/feathers-hooks-common/>`_ to make this happen. Be sure to read the `iff hook API docs <https://feathers-plus.github.io/v1/feathers-hooks-common/#iff>`_ and `else hook API docs <https://feathers-plus.github.io/v1/feathers-hooks-common/#else>`_ if you haven’t, yet."
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:129
msgid "We’re going to use the ``iff`` hook to authenticate users only if a token is in the request. The :doc:`../../api/authentication/jwt`. which we used in ``src/authentication.js``, includes a token extractor. If a request includes a token, it will automatically be available inside the ``context`` object at ``context.params.token``."
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:135
msgid "**src/services/users/users.hooks.js**\\  (This example only shows the ``find`` method’s ``before`` hooks.)"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:158
msgid "Let’s break down the above example. We setup the ``find`` method of the ``/users`` service with an ``iff`` conditional before hook:"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:168
msgid "For this application, the above snippet is equivalent to the snippet, below."
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:181
msgid "The ``iff`` hook is actually more capable than the simple demonstration, above. It can handle an async predicate expression. This would be equivalent to being able to pass a ``promise`` inside the ``if`` statement’s parentheses. It also allows us to chain an \\ ``.else()`` statement, which will run if the predicate evaluates to false."
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:195
msgid "The above statement simply adds ``public: true`` to the query parameters. This limits the query to only find ``user`` records that have the ``public`` property set to ``true``."
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:200
msgid "Wrapping Up"
msgstr ""

#: ../../source/guides/auth/recipe.mixed-auth.rst:202
msgid "With the above code, we’ve successfully setup a ``/users`` service that responds differently to unauthenticated and authenticated users. We used the ``context.params.token`` attribute to either authenticate a user or to limit the search query to only public users. If you become familiar with the `Common Hooks API <https://feathers-plus.github.io/v1/feathers-hooks-common/>`_, you’ll be able to solve almost any authentication puzzle."
msgstr ""

