# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-22 19:43+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/guides/chat/frontend.rst:2
msgid "Building a frontend"
msgstr ""

#: ../../source/guides/chat/frontend.rst:4
msgid "As we have seen in the :doc:`../basics/readme`, Feathers works great in the browser and comes with :doc:`../basics/clients` that allow to easily connect to a Feathers server."
msgstr ""

#: ../../source/guides/chat/frontend.rst:8
msgid "In this chapter we will create a real-time chat frontend with signup and login using modern plain JavaScript. As with the :doc:`../basics/readme`, it will only work in the latest versions of Chrome, Firefox, Safari and Edge since we won’t be using a transpiler like `Babel <http://babeljs.io/>`_. The final version can be found `here <https://github.com/feathersjs/feathers-chat/tree/master/public/vanilla>`_."
msgstr ""

#: ../../source/guides/chat/frontend.rst:15
msgid "We will not be using a frontend framework so we can focus on what Feathers is all about. Feathers is framework agnostic and can be used with any frontend framework like React, VueJS or Angular. For more information see the :doc:`../frameworks/readme`."
msgstr ""

#: ../../source/guides/chat/frontend.rst:21
msgid "Set up the index page"
msgstr ""

#: ../../source/guides/chat/frontend.rst:23
msgid "We are already serving the static files in the ``public`` folder and have a placeholder page in ``public/index.html``. Let’s update it to the following:"
msgstr ""

#: ../../source/guides/chat/frontend.rst:48
msgid "This will load our chat CSS style, add a container div ``#app`` and load several libraries:"
msgstr ""

#: ../../source/guides/chat/frontend.rst:51
msgid "The :doc:`../basics/clients` (since we are not using a module loader like Webpack or Browserify)"
msgstr ""

#: ../../source/guides/chat/frontend.rst:53
msgid "Socket.io provided by the chat API"
msgstr ""

#: ../../source/guides/chat/frontend.rst:54
msgid "`MomentJS <https://momentjs.com/>`_ to format dates"
msgstr ""

#: ../../source/guides/chat/frontend.rst:55
msgid "An ``app.js`` for our code to live in"
msgstr ""

#: ../../source/guides/chat/frontend.rst:57
msgid "Let’s create ``public/app.js`` where all the following code will live (with each code sample added to the end of that file)."
msgstr ""

#: ../../source/guides/chat/frontend.rst:61
msgid "Connect to the API"
msgstr ""

#: ../../source/guides/chat/frontend.rst:63
msgid "We’ll start with the most important thing first, the connection to our Feathers API. We already learned how Feathers can be used on the client in the :doc:`../basics/readme`. Here, we do pretty much the same thing: Establish a Socket connection and initialize a new Feathers application. We also set up the authentication client for later:"
msgstr ""

#: ../../source/guides/chat/frontend.rst:84
msgid "This allows us to talk to the chat API through websockets, for real-time updates."
msgstr ""

#: ../../source/guides/chat/frontend.rst:88
msgid "Base and user/message list HTML"
msgstr ""

#: ../../source/guides/chat/frontend.rst:90
msgid "Next, we have to define some static and dynamic HTML that we can insert into the page when we want to show the login page (which also doubles as the signup page) and the actual chat interface:"
msgstr ""

#: ../../source/guides/chat/frontend.rst:209
msgid "This will add the following variables and functions:"
msgstr ""

#: ../../source/guides/chat/frontend.rst:211
msgid "``loginHTML`` contains some static HTML for the login/signup page"
msgstr ""

#: ../../source/guides/chat/frontend.rst:212
msgid "``chatHTML`` contains the main chat page content (once a user is logged in)"
msgstr ""

#: ../../source/guides/chat/frontend.rst:214
msgid "``addUser(user)`` is a function to add a new user to the user list on the left"
msgstr ""

#: ../../source/guides/chat/frontend.rst:216
msgid "``addMessage(message)`` is a function to add a new message to the list. It will also make sure that we always scroll to the bottom of the message list as messages get added"
msgstr ""

#: ../../source/guides/chat/frontend.rst:221
msgid "Displaying the login/signup or chat page"
msgstr ""

#: ../../source/guides/chat/frontend.rst:223
msgid "Next, we’ll add two functions to display the login and chat page, where we’ll also add a list of the 25 newest chat messages and the registered users."
msgstr ""

#: ../../source/guides/chat/frontend.rst:260
msgid "``showLogin(error)`` will either show the content of loginHTML or, if the login page is already showing, add an error message. This will happen when you try to log in with invalid credentials or sign up with a user that already exists."
msgstr ""

#: ../../source/guides/chat/frontend.rst:264
msgid "``showChat()`` does several things. First, we add the static chatHTML to the page. Then we get the latest 25 messages from the messages Feathers service (this is the same as the ``/messages`` endpoint of our chat API) using the Feathers query syntax. Since the list will come back with the newest message first, we need to reverse the data. Then we add each message by calling our ``addMessage`` function so that it looks like a chat app should — with old messages getting older as you scroll up. After that we get a list of all registered users to show them in the sidebar by calling addUser."
msgstr ""

#: ../../source/guides/chat/frontend.rst:275
msgid "Login and signup"
msgstr ""

#: ../../source/guides/chat/frontend.rst:277
msgid "Alright. Now we can show the login page (including an error message when something goes wrong) and if we are logged in call the ``showChat`` we defined above. We’ve built out the UI, now we have to add the functionality to actually allow people to sign up, log in and also log out."
msgstr ""

#: ../../source/guides/chat/frontend.rst:346
msgid "``getCredentials()`` gets us the values of the username (email) and password fields from the login/signup page to be used directly with Feathers authentication."
msgstr ""

#: ../../source/guides/chat/frontend.rst:349
msgid "``login(credentials)`` will either authenticate the credentials returned by getCredentials against our Feathers API using the local authentication strategy (e.g. username and password) or, if no credentials are given, try and use the JWT stored in localStorage. This will try and get the JWT from localStorage first where it is put automatically once you log in successfully so that we don’t have to log in every time we visit the chat. Only if that doesn’t work it will show the login page. Finally, if the login was successful it will show the chat page."
msgstr ""

#: ../../source/guides/chat/frontend.rst:358
msgid "We also added click event listeners for three buttons. ``#login`` will get the credentials and just log in with those. Clicking ``#signup`` will signup and log in at the same time. It will first create a new user on our API and then log in with that same user information. Finally, ``#logout`` will forget the JWT and then show the login page again."
msgstr ""

#: ../../source/guides/chat/frontend.rst:366
msgid "Real-time and sending messages"
msgstr ""

#: ../../source/guides/chat/frontend.rst:368
msgid "In the last step we will add functionality to send new message and make the user and message list update in real-time."
msgstr ""

#: ../../source/guides/chat/frontend.rst:397
msgid "The ``#submit`` button event listener gets the message text from the input field, creates a new message on the messages service and then clears out the field."
msgstr ""

#: ../../source/guides/chat/frontend.rst:400
msgid "Next, we added two ``created`` event listeners. One for ``messages`` which calls the ``addMessage`` function to add the new message to the list and one for ``users`` which adds the user to the list via ``addUser``. This is how Feathers does real-time and everything we need to do in order to get everything to update automatically."
msgstr ""

#: ../../source/guides/chat/frontend.rst:405
msgid "To kick our application off, we call ``login()`` which as mentioned above will either show the chat application right away (if we signed in before and the token isn’t expired) or the login page."
msgstr ""

#: ../../source/guides/chat/frontend.rst:410
msgid "What’s next?"
msgstr ""

#: ../../source/guides/chat/frontend.rst:412
msgid "That’s it. We now have a plain JavaScript real-time chat frontend with login and signup. This example demonstrates many of the core principles of how you interact with a Feathers API."
msgstr ""

#: ../../source/guides/chat/frontend.rst:416
msgid "If you run into an issue, remember you can find a complete working example `here <https://github.com/feathersjs/feathers-chat>`_."
msgstr ""

#: ../../source/guides/chat/frontend.rst:419
msgid "In the final chapter, we’ll look at :doc:`./testing`."
msgstr ""

