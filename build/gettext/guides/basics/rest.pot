# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-21 21:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/guides/basics/rest.rst:2
msgid "REST APIs"
msgstr ""

#: ../../source/guides/basics/rest.rst:4
msgid "In the previous chapters we learned about Feathers :doc:`./hooks` and created a messages service that works in NodeJS and the browser. We saw how Feathers automatically sends events but so far we didn’t really create a web API that other people can use."
msgstr ""

#: ../../source/guides/basics/rest.rst:9
msgid "This is what Feathers transports do. A transport is a plugin that turns a Feathers application into a server that exposes our services through different protocols for other clients to use. Since a transport involves running a server it won’t work in the browser but we will learn later that there are complementary plugins for connecting to a Feathers server in a browser Feathers application."
msgstr ""

#: ../../source/guides/basics/rest.rst:16
msgid "Currently Feathers officially has three transports:"
msgstr ""

#: ../../source/guides/basics/rest.rst:18
msgid ":doc:`../../api/express` for exposing services through a JSON REST API"
msgstr ""

#: ../../source/guides/basics/rest.rst:19
msgid ":doc:`../../api/socketio` for connecting to services through websockets and also receiving real-time service events"
msgstr ""

#: ../../source/guides/basics/rest.rst:20
msgid ":doc:`../../api/primus` an alternative to Socket.io supporting several websocket protocols which also supports real-time events"
msgstr ""

#: ../../source/guides/basics/rest.rst:22
msgid "In this chapter we will look at the HTTP REST transport and Feathers Express framework integration."
msgstr ""

#: ../../source/guides/basics/rest.rst:26
msgid "REST and services"
msgstr ""

#: ../../source/guides/basics/rest.rst:28
msgid "One of the goals of Feathers is to make building `REST APIs <https://en.wikipedia.org/wiki/Representational_state_transfer>`_ easier since it is by far the most common protocol for web APIs. For example, we want to make a request like ``GET /messages/1`` and get a JSON response like ``{ \"id\": 1, \"text\": \"The first message\" }``. You may already have noticed that the Feathers service methods and the HTTP methods like ``GET``, ``POST``, ``PATCH`` and ``DELETE`` are fairly complementary to each other:"
msgstr ""

#: ../../source/guides/basics/rest.rst:37
msgid "Service method"
msgstr ""

#: ../../source/guides/basics/rest.rst:37
msgid "HTTP method"
msgstr ""

#: ../../source/guides/basics/rest.rst:37
msgid "Path"
msgstr ""

#: ../../source/guides/basics/rest.rst:39
msgid ".find()"
msgstr ""

#: ../../source/guides/basics/rest.rst:39
#: ../../source/guides/basics/rest.rst:40
msgid "GET"
msgstr ""

#: ../../source/guides/basics/rest.rst:39
#: ../../source/guides/basics/rest.rst:41
msgid "/messages"
msgstr ""

#: ../../source/guides/basics/rest.rst:40
msgid ".get()"
msgstr ""

#: ../../source/guides/basics/rest.rst:40
#: ../../source/guides/basics/rest.rst:42
#: ../../source/guides/basics/rest.rst:43
#: ../../source/guides/basics/rest.rst:44
msgid "/messages/1"
msgstr ""

#: ../../source/guides/basics/rest.rst:41
msgid ".create()"
msgstr ""

#: ../../source/guides/basics/rest.rst:41
msgid "POST"
msgstr ""

#: ../../source/guides/basics/rest.rst:42
msgid ".update()"
msgstr ""

#: ../../source/guides/basics/rest.rst:42
msgid "PUT"
msgstr ""

#: ../../source/guides/basics/rest.rst:43
msgid ".patch()"
msgstr ""

#: ../../source/guides/basics/rest.rst:43
msgid "PATCH"
msgstr ""

#: ../../source/guides/basics/rest.rst:44
msgid ".remove()"
msgstr ""

#: ../../source/guides/basics/rest.rst:44
msgid "DELETE"
msgstr ""

#: ../../source/guides/basics/rest.rst:47
msgid "What the Feathers REST transport essentially does is to automatically map our existing service methods to those endpoints."
msgstr ""

#: ../../source/guides/basics/rest.rst:51
msgid "Express integration"
msgstr ""

#: ../../source/guides/basics/rest.rst:53
msgid "`Express <http://expressjs.com/>`_ is probably the most popular Node framework for creating web applications and APIs. The :doc:`../../api/express` allows us to turn a Feathers application into an application that is both a Feathers application and a fully compatible Express application. This means you can use Feathers functionality like services and also any existing Express middleware. As mentioned before, the Express framework integration only works on the server."
msgstr ""

#: ../../source/guides/basics/rest.rst:61
msgid "To add the integration we install ``@feathersjs/express``:"
msgstr ""

#: ../../source/guides/basics/rest.rst:67
msgid "Then we can initialize a Feathers and Express application that exposes services as a REST API on port ``3030`` like this:"
msgstr ""

#: ../../source/guides/basics/rest.rst:91
msgid "``express.json``, ``express.urlencoded`` and ``express.errorHandler`` are normal Express middlewares. We can still use ``app.use`` to register a Feathers service though."
msgstr ""

#: ../../source/guides/basics/rest.rst:95
msgid "You can find more information about the Express framework integration in the :doc:`../../api/express`."
msgstr ""

#: ../../source/guides/basics/rest.rst:99
msgid "A messages REST API"
msgstr ""

#: ../../source/guides/basics/rest.rst:101
msgid "The code above is really all we need to turn our messages service into a REST API. Here is the complete code for our ``app.js`` exposing the service from the :doc:`./services` through a REST API:"
msgstr ""

#: ../../source/guides/basics/rest.rst:196
msgid "You can start the server by running"
msgstr ""

#: ../../source/guides/basics/rest.rst:202
msgid "The server will stay running until you stop it by pressing Control + C in the terminal. Remember to stop and start the server every time ``app.js`` changes."
msgstr ""

#: ../../source/guides/basics/rest.rst:207
msgid "In Express an error handler, here ``app.use(express.errorHandler());``, always has to be the last line before starting the server."
msgstr ""

#: ../../source/guides/basics/rest.rst:211
msgid "Using the API"
msgstr ""

#: ../../source/guides/basics/rest.rst:213
msgid "Once the server is running the first thing we can do is hit `localhost:3030/messages <http://localhost:3030/messages>`_ in the browser. Since we already created a message on the server, the JSON response will look like this:"
msgstr ""

#: ../../source/guides/basics/rest.rst:222
msgid "We can also retrieve that specific message by going to `localhost:3030/messages/1 <http://localhost:3030/messages/1>`_."
msgstr ""

#: ../../source/guides/basics/rest.rst:225
msgid "A browser plugin like `JSON viewer for Chrome <https://chrome.google.com/webstore/detail/json-viewer/gbmdgpbipfallnflgajpaliibnhdgobh>`_ makes it much nicer to view JSON responses."
msgstr ""

#: ../../source/guides/basics/rest.rst:228
msgid "New messages can now be created by sending a POST request with JSON data to the same URL by using cURL on the command line like this:"
msgstr ""

#: ../../source/guides/basics/rest.rst:237
msgid "You can also use tools like `Postman <https://www.getpostman.com/>`_ to make HTTP requests."
msgstr ""

#: ../../source/guides/basics/rest.rst:240
msgid "If you now refresh `localhost:3030/messages <http://localhost:3030/messages>`_ you will see the newly created message."
msgstr ""

#: ../../source/guides/basics/rest.rst:242
msgid "We can also remove a message by sending a ``DELETE`` to its URL:"
msgstr ""

#: ../../source/guides/basics/rest.rst:250
msgid "What’s next?"
msgstr ""

#: ../../source/guides/basics/rest.rst:252
msgid "In this chapter we built a fully functional messages REST API. You can probably already imagine how our messages service could store its data in a database instead of the :doc:`messages` array. In the :doc:`databases`, let’s look at some services that implement different databases allowing us to create those APIs with even less code!"
msgstr ""

