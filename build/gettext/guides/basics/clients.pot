# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2019, BandCap
# This file is distributed under the same license as the feathers docs package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: feathers docs \n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2019-06-21 21:06+0800\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#: ../../source/guides/basics/clients.rst:2
msgid "Client use"
msgstr ""

#: ../../source/guides/basics/clients.rst:4
msgid "So far, we have seen that Feathers with its services, events and hooks can also be used in the browser, which is a very unique feature. By implementing custom services that talk to an API in the browser, Feathers allows us to structure any client-side application with any framework."
msgstr ""

#: ../../source/guides/basics/clients.rst:10
msgid "This is exactly what Feathers client-side services do. In order to connect to a Feathers server, a client creates Services that use a REST or websocket connection to relay method calls and allow listening to events from the server. This means that we can use a client-side Feathers application to transparently talk to a Feathers server the same way we’d use it locally (as we’ve done in previous examples)!"
msgstr ""

#: ../../source/guides/basics/clients.rst:17
msgid "The following examples demonstrate using the Feathers client through a ``<script>`` tag. For more information on using a module loader like Webpack or Browserify and loading individual modules see the :doc:`../api/client`."
msgstr ""

#: ../../source/guides/basics/clients.rst:23
msgid "Real-time client"
msgstr ""

#: ../../source/guides/basics/clients.rst:25
msgid "In the :doc:`./real-time` we saw an example of how to directly use a websocket connection to make service calls and listen to events. We can also use a browser Feathers application and client services that use this connection. Let’s update ``public/client.js`` to:"
msgstr ""

#: ../../source/guides/basics/clients.rst:56
msgid "REST client"
msgstr ""

#: ../../source/guides/basics/clients.rst:58
msgid "We can also create services that communicate via REST using many different Ajax libraries like `jQuery <https://jquery.com>`_ or `Axios <https://github.com/axios/axios>`_. For this example, we will use `fetch <https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API>`_ since it’s built-in modern browsers."
msgstr ""

#: ../../source/guides/basics/clients.rst:65
msgid "REST services can only emit real-time events locally, to themselves. REST does not support real-time updates from the server."
msgstr ""

#: ../../source/guides/basics/clients.rst:69
msgid "Since we are making a cross-domain request, we first have to enable `Cross-Origin Resource sharing (CORS) <https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS>`_ on the server. Update ``app.js`` to:"
msgstr ""

#: ../../source/guides/basics/clients.rst:125
msgid "This is just a basic middleware setting the headers. In production (and applications created by the Feathers generator) we will use the `cors <https://github.com/expressjs/cors>`_ module."
msgstr ""

#: ../../source/guides/basics/clients.rst:129
msgid "Then we can update ``public/client.js`` to:"
msgstr ""

#: ../../source/guides/basics/clients.rst:157
msgid "What’s next?"
msgstr ""

#: ../../source/guides/basics/clients.rst:159
msgid "In this chapter we learned how to transparently connect to another Feathers server and use its services as we previously did when accessing them server-side. In the :doc:`./generator` we’ll briefly look at the Feathers generator (CLI) and the patterns it uses to structure an application before jumping into :doc:`../chat/readme`."
msgstr ""

